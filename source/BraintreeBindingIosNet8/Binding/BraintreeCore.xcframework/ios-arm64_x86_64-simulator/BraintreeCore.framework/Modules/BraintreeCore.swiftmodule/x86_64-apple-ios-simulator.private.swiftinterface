// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BraintreeCore
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AuthenticationServices
import Foundation
import Security
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers @objcMembers public class BTPaymentMethodNonceParser : ObjectiveC.NSObject {
  @objc(sharedParser) public static let shared: BraintreeCore.BTPaymentMethodNonceParser
  @objc public var allTypes: [Swift.String] {
    @objc get
  }
  @objc public func isTypeAvailable(_ type: Swift.String) -> Swift.Bool
  @objc public func registerType(_ type: Swift.String?, withParsingBlock: @escaping (_ json: BraintreeCore.BTJSON?) -> BraintreeCore.BTPaymentMethodNonce?)
  @objc public func parseJSON(_ json: BraintreeCore.BTJSON?, withParsingBlockForType type: Swift.String?) -> BraintreeCore.BTPaymentMethodNonce?
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class BTBinData : ObjectiveC.NSObject {
  @objc final public let prepaid: Swift.String
  @objc final public let healthcare: Swift.String
  @objc final public let debit: Swift.String
  @objc final public let durbinRegulated: Swift.String
  @objc final public let commercial: Swift.String
  @objc final public let payroll: Swift.String
  @objc final public let issuingBank: Swift.String
  @objc final public let countryOfIssuance: Swift.String
  @objc final public let productID: Swift.String
  @objc(initWithJSON:) public init(json: BraintreeCore.BTJSON?)
  @objc deinit
}
@objc @_documentation(visibility: private) @objcMembers public class BTClientToken : ObjectiveC.NSObject, Foundation.NSCoding, Foundation.NSCopying, BraintreeCore.ClientAuthorization {
  @objc final public let json: BraintreeCore.BTJSON
  @objc final public let bearer: Swift.String
  @objc final public let configURL: Foundation.URL
  final public let type: BraintreeCore.AuthorizationType
  @objc final public let originalValue: Swift.String
  @objc(initWithClientToken:error:) public init(clientToken: Swift.String) throws
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc required convenience public init?(coder: Foundation.NSCoder)
  @objc(copyWithZone:) public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_documentation(visibility: private) @objcMembers public class BTJSON : ObjectiveC.NSObject {
  @objc convenience public init(value: Any?)
  @objc convenience public init(data: Foundation.Data)
  @objc public var isString: Swift.Bool {
    @objc get
  }
  @objc public var isBool: Swift.Bool {
    @objc get
  }
  @objc public var isNumber: Swift.Bool {
    @objc get
  }
  @objc public var isArray: Swift.Bool {
    @objc get
  }
  @objc public var isObject: Swift.Bool {
    @objc get
  }
  @objc public var isError: Swift.Bool {
    @objc get
  }
  @objc public var isTrue: Swift.Bool {
    @objc get
  }
  @objc public var isFalse: Swift.Bool {
    @objc get
  }
  @objc public var isNull: Swift.Bool {
    @objc get
  }
  @objc public subscript(index: Swift.Int) -> BraintreeCore.BTJSON {
    @objc get
  }
  @objc public subscript(key: Swift.String) -> BraintreeCore.BTJSON {
    @objc get
  }
  @objc public func asError() -> Foundation.NSError?
  @objc public func asString() -> Swift.String?
  public func asBool() -> Swift.Bool?
  @objc public func asArray() -> [BraintreeCore.BTJSON]?
  @objc public func asNumber() -> Foundation.NSNumber?
  @objc public func asURL() -> Foundation.URL?
  @objc public func asStringArray() -> [Swift.String]?
  @objc public func asDictionary() -> Foundation.NSDictionary?
  @objc public func asIntegerOrZero() -> Swift.Int
  @objc public func asEnum(_ mapping: [Swift.String : Any], orDefault: Swift.Int) -> Swift.Int
  @objc public func asAddress() -> BraintreeCore.BTPostalAddress?
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @_documentation(visibility: private) public class BTClientMetadata : Swift.Encodable {
  public var integration: BraintreeCore.BTClientMetadataIntegration
  public var source: BraintreeCore.BTClientMetadataSource
  public var sessionID: Swift.String
  public var platform: Swift.String
  public var version: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
public enum BTAPIClientError : Swift.Int, Swift.Error, Foundation.CustomNSError, Foundation.LocalizedError, Swift.Equatable {
  case configurationUnavailable
  case notAuthorized
  case deallocated
  case failedBase64Encoding
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var errorDescription: Swift.String? {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class BTAPIClient : ObjectiveC.NSObject {
  @_documentation(visibility: private) public typealias RequestCompletion = (BraintreeCore.BTJSON?, Foundation.HTTPURLResponse?, (any Swift.Error)?) -> Swift.Void
  public var authorization: any BraintreeCore.ClientAuthorization
  public var metadata: BraintreeCore.BTClientMetadata {
    get
  }
  @objc(initWithAuthorization:) public init?(authorization: Swift.String)
  @objc deinit
  @objc @_documentation(visibility: private) public func fetchOrReturnRemoteConfiguration(_ completion: @escaping (BraintreeCore.BTConfiguration?, (any Swift.Error)?) -> Swift.Void)
  @objc public func fetchPaymentMethodNonces(_ completion: @escaping ([BraintreeCore.BTPaymentMethodNonce]?, (any Swift.Error)?) -> Swift.Void)
  @objc public func fetchPaymentMethodNonces(_ defaultFirst: Swift.Bool, completion: @escaping ([BraintreeCore.BTPaymentMethodNonce]?, (any Swift.Error)?) -> Swift.Void)
  @_documentation(visibility: private) public func get(_ path: Swift.String, parameters: (any Swift.Encodable)? = nil, httpType: BraintreeCore.BTAPIClientHTTPService = .gateway, completion: @escaping BraintreeCore.BTAPIClient.RequestCompletion)
  @_documentation(visibility: private) @objc(POST:parameters:httpType:completion:) public func post(_ path: Swift.String, parameters: [Swift.String : Any]? = nil, httpType: BraintreeCore.BTAPIClientHTTPService = .gateway, completion: @escaping BraintreeCore.BTAPIClient.RequestCompletion)
  @_documentation(visibility: private) public func post(_ path: Swift.String, parameters: any Swift.Encodable, headers: [Swift.String : Swift.String]? = nil, httpType: BraintreeCore.BTAPIClientHTTPService = .gateway, completion: @escaping BraintreeCore.BTAPIClient.RequestCompletion)
  #if compiler(>=5.3) && $AsyncAwait
  @_documentation(visibility: private) public func post(_ path: Swift.String, parameters: any Swift.Encodable, headers: [Swift.String : Swift.String]? = nil, httpType: BraintreeCore.BTAPIClientHTTPService = .gateway) async throws -> (BraintreeCore.BTJSON?, Foundation.HTTPURLResponse?)
  #endif
  @_documentation(visibility: private) public func sendAnalyticsEvent(_ eventName: Swift.String, correlationID: Swift.String? = nil, errorDescription: Swift.String? = nil, isConfigFromCache: Swift.Bool? = nil, isVaultRequest: Swift.Bool? = nil, linkType: BraintreeCore.LinkType? = nil, payPalContextID: Swift.String? = nil)
}
public enum BTAnalyticsServiceError : Swift.Int, Swift.Error, Foundation.CustomNSError, Foundation.LocalizedError, Swift.Equatable {
  case invalidAPIClient
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var errorDescription: Swift.String? {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers open class BTPaymentMethodNonce : ObjectiveC.NSObject {
  @objc public var nonce: Swift.String
  @objc public var type: Swift.String
  @objc public var isDefault: Swift.Bool
  @objc(initWithNonce:) public init(nonce: Swift.String)
  @objc(initWithNonce:type:) public init(nonce: Swift.String, type: Swift.String)
  @objc(initWithNonce:type:isDefault:) public init(nonce: Swift.String, type: Swift.String, isDefault: Swift.Bool)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_documentation(visibility: private) open class BTWebAuthenticationSessionClient : ObjectiveC.NSObject, AuthenticationServices.ASWebAuthenticationPresentationContextProviding {
  @objc public func presentationAnchor(for session: AuthenticationServices.ASWebAuthenticationSession) -> AuthenticationServices.ASPresentationAnchor
  @objc override dynamic public init()
  @objc deinit
}
@_documentation(visibility: private) @objc public protocol BTAppContextSwitchClient {
  @objc static func canHandleReturnURL(_ url: Foundation.URL) -> Swift.Bool
  @objc static func handleReturnURL(_ url: Foundation.URL)
}
public enum BTHTTPError : Swift.Error, Foundation.CustomNSError, Foundation.LocalizedError, Swift.Equatable {
  case unknown
  case responseContentTypeNotAcceptable([Swift.String : Any])
  case clientError([Swift.String : Any])
  case serverError([Swift.String : Any])
  case missingBaseURL([Swift.String : Any])
  case rateLimitError([Swift.String : Any])
  case dataNotFound
  case httpResponseInvalid
  case urlStringInvalid
  case clientApiURLInvalid
  case invalidAuthorizationFingerprint
  case serializationError(Swift.String)
  case deallocated(Swift.String)
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
  public static func == (lhs: BraintreeCore.BTHTTPError, rhs: BraintreeCore.BTHTTPError) -> Swift.Bool
}
@_documentation(visibility: private) @objc public enum BTClientMetadataIntegration : Swift.Int {
  case custom
  case dropIn
  public var stringValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_documentation(visibility: private) @objcMembers public class BTCoreConstants : ObjectiveC.NSObject {
  @objc public static var braintreeSDKVersion: Swift.String
  @objc public static let callbackURLScheme: Swift.String
  @objc public static let venmoURLScheme: Swift.String
  @objc public static let payPalURLScheme: Swift.String
  @objc public static let httpErrorDomain: Swift.String
  @objc public static let urlResponseKey: Swift.String
  @objc public static let jsonResponseBodyKey: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_documentation(visibility: private) public protocol ClientAuthorization {
  var type: BraintreeCore.AuthorizationType { get }
  var configURL: Foundation.URL { get }
  var bearer: Swift.String { get }
  var originalValue: Swift.String { get }
}
@_documentation(visibility: private) public enum AuthorizationType {
  case tokenizationKey
  case clientToken
  public static func == (a: BraintreeCore.AuthorizationType, b: BraintreeCore.AuthorizationType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public enum BTCardNetwork : Swift.Int {
  case unknown
  case AMEX
  case dinersClub
  case discover
  case masterCard
  case visa
  case JCB
  case laser
  case maestro
  case unionPay
  case hiper
  case hipercard
  case solo
  case `switch`
  case ukMaestro
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_documentation(visibility: private) public enum BTLogLevel : Swift.Int {
  case critical
  case error
  case warning
  case info
  case debug
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_documentation(visibility: private) public protocol URLOpener {
  func canOpenURL(_ url: Foundation.URL) -> Swift.Bool
  func open(_ url: Foundation.URL, completionHandler completion: ((Swift.Bool) -> Swift.Void)?)
  func isPayPalAppInstalled() -> Swift.Bool
  func isVenmoAppInstalled() -> Swift.Bool
}
extension UIKit.UIApplication : BraintreeCore.URLOpener {
  @_documentation(visibility: private) @_Concurrency.MainActor(unsafe) public func isVenmoAppInstalled() -> Swift.Bool
  @_documentation(visibility: private) @_Concurrency.MainActor(unsafe) public func isPayPalAppInstalled() -> Swift.Bool
  @_documentation(visibility: private) @_Concurrency.MainActor(unsafe) public func open(_ url: Foundation.URL, completionHandler completion: ((Swift.Bool) -> Swift.Void)?)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class BTAppContextSwitcher : ObjectiveC.NSObject {
  @objc public static let sharedInstance: BraintreeCore.BTAppContextSwitcher
  @objc public var returnURLScheme: Swift.String
  @discardableResult
  @objc(handleOpenURLContext:) public func handleOpenURL(context: UIKit.UIOpenURLContext) -> Swift.Bool
  @discardableResult
  @objc(handleOpenURL:) public func handleOpen(_ url: Foundation.URL) -> Swift.Bool
  @objc(registerAppContextSwitchClient:) public func register(_ client: any BraintreeCore.BTAppContextSwitchClient.Type)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_documentation(visibility: private) public class BTLogLevelDescription : ObjectiveC.NSObject {
  public static func string(for level: BraintreeCore.BTLogLevel) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
public enum TokenizationKeyError : Swift.Int, Swift.Error, Foundation.CustomNSError, Foundation.LocalizedError, Swift.Equatable {
  case invalid
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var errorDescription: Swift.String? {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class BTPostalAddress : ObjectiveC.NSObject {
  @objc public var recipientName: Swift.String?
  @objc public var streetAddress: Swift.String?
  @objc public var extendedAddress: Swift.String?
  @objc public var locality: Swift.String?
  @objc public var countryCodeAlpha2: Swift.String?
  @objc public var postalCode: Swift.String?
  @objc public var region: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_documentation(visibility: private) @objcMembers public class BTConfiguration : ObjectiveC.NSObject {
  @objc final public let json: BraintreeCore.BTJSON?
  @objc public var environment: Swift.String? {
    @objc get
  }
  @objc public var isFromCache: Swift.Bool
  @objc(initWithJSON:) public init(json: BraintreeCore.BTJSON?)
  @objc deinit
}
@_documentation(visibility: private) public enum LinkType : Swift.String {
  case universal
  case deeplink
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum BTClientTokenError : Swift.Error, Foundation.CustomNSError, Foundation.LocalizedError, Swift.Equatable {
  case invalidAuthorizationFingerprint
  case invalidConfigURL
  case invalidFormat(Swift.String)
  case unsupportedVersion
  case failedDecoding(Swift.String)
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var errorDescription: Swift.String? {
    get
  }
  public static func == (a: BraintreeCore.BTClientTokenError, b: BraintreeCore.BTClientTokenError) -> Swift.Bool
}
@_documentation(visibility: private) @objc public enum BTAPIClientHTTPService : Swift.Int {
  case gateway
  case graphQLAPI
  case payPalAPI
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_documentation(visibility: private) @objc public enum BTClientMetadataSource : Swift.Int {
  case unknown
  case payPalApp
  case payPalBrowser
  case venmoApp
  case form
  public var stringValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_documentation(visibility: private) @objc public class BTURLUtils : ObjectiveC.NSObject {
  public static func queryString(from dict: Foundation.NSDictionary) -> Swift.String
  public static func queryParameters(for url: Foundation.URL) -> [Swift.String : Swift.String]
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_documentation(visibility: private) public class BTWebAuthenticationSession : ObjectiveC.NSObject {
  public var prefersEphemeralWebBrowserSession: Swift.Bool?
  public func start(url: Foundation.URL, context: any AuthenticationServices.ASWebAuthenticationPresentationContextProviding, sessionDidComplete: @escaping (Foundation.URL?, (any Swift.Error)?) -> Swift.Void, sessionDidAppear: @escaping (Swift.Bool) -> Swift.Void, sessionDidCancel: @escaping () -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
public enum BTJSONError : Swift.Error, Foundation.CustomNSError, Foundation.LocalizedError, Swift.Equatable {
  case jsonSerializationFailure
  case indexInvalid(Swift.Int)
  case keyInvalid(Swift.String)
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var errorDescription: Swift.String? {
    get
  }
  public static func == (a: BraintreeCore.BTJSONError, b: BraintreeCore.BTJSONError) -> Swift.Bool
}
extension BraintreeCore.BTAPIClientError : Swift.Hashable {}
extension BraintreeCore.BTAPIClientError : Swift.RawRepresentable {}
extension BraintreeCore.BTAnalyticsServiceError : Swift.Hashable {}
extension BraintreeCore.BTAnalyticsServiceError : Swift.RawRepresentable {}
extension BraintreeCore.BTClientMetadataIntegration : Swift.Equatable {}
extension BraintreeCore.BTClientMetadataIntegration : Swift.Hashable {}
extension BraintreeCore.BTClientMetadataIntegration : Swift.RawRepresentable {}
extension BraintreeCore.AuthorizationType : Swift.Equatable {}
extension BraintreeCore.AuthorizationType : Swift.Hashable {}
extension BraintreeCore.BTCardNetwork : Swift.Equatable {}
extension BraintreeCore.BTCardNetwork : Swift.Hashable {}
extension BraintreeCore.BTCardNetwork : Swift.RawRepresentable {}
extension BraintreeCore.BTLogLevel : Swift.Equatable {}
extension BraintreeCore.BTLogLevel : Swift.Hashable {}
extension BraintreeCore.BTLogLevel : Swift.RawRepresentable {}
extension BraintreeCore.TokenizationKeyError : Swift.Hashable {}
extension BraintreeCore.TokenizationKeyError : Swift.RawRepresentable {}
extension BraintreeCore.LinkType : Swift.Equatable {}
extension BraintreeCore.LinkType : Swift.Hashable {}
extension BraintreeCore.LinkType : Swift.RawRepresentable {}
extension BraintreeCore.BTAPIClientHTTPService : Swift.Equatable {}
extension BraintreeCore.BTAPIClientHTTPService : Swift.Hashable {}
extension BraintreeCore.BTAPIClientHTTPService : Swift.RawRepresentable {}
extension BraintreeCore.BTClientMetadataSource : Swift.Equatable {}
extension BraintreeCore.BTClientMetadataSource : Swift.Hashable {}
extension BraintreeCore.BTClientMetadataSource : Swift.RawRepresentable {}
