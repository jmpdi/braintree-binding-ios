#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
#ifndef BRAINTREECORE_SWIFT_H
#define BRAINTREECORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AuthenticationServices;
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="BraintreeCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;
@class BTConfiguration;
@class BTPaymentMethodNonce;
enum BTAPIClientHTTPService : NSInteger;
@class BTJSON;
@class NSHTTPURLResponse;

/// This class acts as the entry point for accessing the Braintree APIs via common HTTP methods performed on API endpoints.
/// note:
/// It also manages authentication via tokenization key and provides access to a merchant’s gateway configuration.
SWIFT_CLASS("_TtC13BraintreeCore11BTAPIClient")
@interface BTAPIClient : NSObject
/// Initialize a new API client.
/// \param authorization Your tokenization key or client token. Passing an invalid value may return <code>nil</code>.
///
- (nullable instancetype)initWithAuthorization:(NSString * _Nonnull)authorization OBJC_DESIGNATED_INITIALIZER;
/// :nodoc: This method is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// Provides configuration data as a <code>BTJSON</code> object.
/// The configuration data can be used by supported payment options to configure themselves
/// dynamically through the Control Panel. It also contains configuration options for the Braintree SDK Core components.
/// note:
/// This method is asynchronous because it requires a network call to fetch the
/// configuration for a merchant account from Braintree servers. This configuration is
/// cached on subsequent calls for better performance.
/// \param completion Callback that returns either a <code>BTConfiguration</code> or <code>Error</code>
///
- (void)fetchOrReturnRemoteConfiguration:(void (^ _Nonnull)(BTConfiguration * _Nullable, NSError * _Nullable))completion;
/// Fetches a customer’s vaulted payment method nonces.
/// Must be using client token with a customer ID specified.
/// note:
/// Only the top level <code>BTPaymentMethodNonce</code> type is returned, fetching any additional details will need to be done on the server
/// \param completion Callback that returns either an array of payment method nonces or an error
///
- (void)fetchPaymentMethodNonces:(void (^ _Nonnull)(NSArray<BTPaymentMethodNonce *> * _Nullable, NSError * _Nullable))completion;
/// Fetches a customer’s vaulted payment method nonces.
/// Must be using client token with a customer ID specified.
/// note:
/// Only the top level <code>BTPaymentMethodNonce</code> type is returned, fetching any additional details will need to be done on the server
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     defaultFirst: Specifies whether to sort the fetched payment method nonces with the default payment method or the most recently used payment method first
///   </li>
///   <li>
///     completion: Callback that returns either an array of payment method nonces or an error
///   </li>
/// </ul>
- (void)fetchPaymentMethodNonces:(BOOL)defaultFirst completion:(void (^ _Nonnull)(NSArray<BTPaymentMethodNonce *> * _Nullable, NSError * _Nullable))completion;
/// :nodoc: This method is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// Perfom an HTTP POST on a URL composed of the configured from environment and the given path.
/// \param path The endpoint URI path.
///
/// \param parameters Optional set of query parameters to be encoded with the request.
///
/// \param httpType The underlying <code>BTAPIClientHTTPService</code> of the HTTP request. Defaults to <code>.gateway</code>.
///
/// \param completion A block object to be executed when the request finishes.
/// On success, <code>body</code> and <code>response</code> will contain the JSON body response and the
/// HTTP response and <code>error</code> will be <code>nil</code>; on failure, <code>body</code> and <code>response</code> will be
/// <code>nil</code> and <code>error</code> will contain the error that occurred.
///
- (void)POST:(NSString * _Nonnull)path parameters:(NSDictionary<NSString *, id> * _Nullable)parameters httpType:(enum BTAPIClientHTTPService)httpType completion:(void (^ _Nonnull)(BTJSON * _Nullable, NSHTTPURLResponse * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// :nodoc: This enum is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
typedef SWIFT_ENUM(NSInteger, BTAPIClientHTTPService, open) {
/// Use the Gateway
  BTAPIClientHTTPServiceGateway = 0,
/// Use the GraphQL API
  BTAPIClientHTTPServiceGraphQLAPI = 1,
/// Use the PayPal API
  BTAPIClientHTTPServicePayPalAPI = 2,
};

@class NSURL;

/// :nodoc: This protocol is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
SWIFT_PROTOCOL("_TtP13BraintreeCore24BTAppContextSwitchClient_")
@protocol BTAppContextSwitchClient
/// Determine whether the return URL can be handled.
/// \param url the URL you receive in  <code>scene(_:openURLContexts:)</code> (or <code>application(_:open:options:)</code> if not using SceneDelegate) when returning to your app
///
///
/// returns:
/// <code>true</code> when the SDK can process the return URL
+ (BOOL)canHandleReturnURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Complete payment flow after returning from app or browser switch.
/// \param url The URL you receive in <code>scene(_:openURLContexts:)</code> (or <code>application(_:open:options:)</code> if not using SceneDelegate)
///
+ (void)handleReturnURL:(NSURL * _Nonnull)url;
@end

@class UIOpenURLContext;

/// Handles return URLs when returning from app context switch and routes the return URL to the correct app context switch client class.
/// note:
/// <code>returnURLScheme</code> must contain your app’s registered URL Type that starts with the app’s bundle ID.
/// When your app returns from app switch, the app delegate should call  <code>handleOpenURL</code> (or <code>handleOpen</code> if not using SceneDelegate)
SWIFT_CLASS("_TtC13BraintreeCore20BTAppContextSwitcher")
@interface BTAppContextSwitcher : NSObject
/// Singleton for shared instance of <code>BTAppContextSwitcher</code>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BTAppContextSwitcher * _Nonnull sharedInstance;)
+ (BTAppContextSwitcher * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
/// The URL scheme to return to this app after switching to another app or opening a SFSafariViewController.
/// This URL scheme must be registered as a URL Type in the app’s info.plist, and it must start with the app’s bundle ID.
/// note:
/// This property should only be used for the Venmo flow.
@property (nonatomic, copy) NSString * _Nonnull returnURLScheme;
/// Determine whether the return URL can be handled.
/// <ul>
///   <li>
///     Parameters: url the URL you receive in  <code>scene:openURLContexts:</code> (or <code>application:openURL:options:</code> if not using SceneDelegate) when returning to your app
///   </li>
/// </ul>
///
/// returns:
/// <code>true</code> when the SDK can process the return URL
- (BOOL)handleOpenURLContext:(UIOpenURLContext * _Nonnull)context;
/// Complete payment flow after returning from app or browser switch.
/// \param url The URL you receive in <code>scene:openURLContexts:</code> (or <code>application:openURL:options:</code> if not using SceneDelegate)
///
///
/// returns:
/// <code>true</code> when the SDK has handled the URL successfully
- (BOOL)handleOpenURL:(NSURL * _Nonnull)url;
/// Registers a class <code>Type</code> that can handle a return from app context switch with a static method.
/// \param client A class <code>Type</code> that implements <code>BTAppContextSwitchClient</code>, the methods of which will be invoked statically on the class.
///
- (void)registerAppContextSwitchClient:(Class <BTAppContextSwitchClient> _Nonnull)client;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Contains the bin data associated with a payment method
SWIFT_CLASS("_TtC13BraintreeCore9BTBinData")
@interface BTBinData : NSObject
/// Whether the card is a prepaid card. Possible values: Yes/No/Unknown
@property (nonatomic, readonly, copy) NSString * _Nonnull prepaid;
/// Whether the card is a healthcare card. Possible values: Yes/No/Unknown
@property (nonatomic, readonly, copy) NSString * _Nonnull healthcare;
/// Whether the card is a debit card. Possible values: Yes/No/Unknown
@property (nonatomic, readonly, copy) NSString * _Nonnull debit;
/// A value indicating whether the issuing bank’s card range is regulated by the Durbin Amendment due to the bank’s assets. Possible values: Yes/No/Unknown
@property (nonatomic, readonly, copy) NSString * _Nonnull durbinRegulated;
/// Whether the card type is a commercial card and is capable of processing Level 2 transactions. Possible values: Yes/No/Unknown
@property (nonatomic, readonly, copy) NSString * _Nonnull commercial;
/// Whether the card is a payroll card. Possible values: Yes/No/Unknown
@property (nonatomic, readonly, copy) NSString * _Nonnull payroll;
/// The bank that issued the credit card, if available.
@property (nonatomic, readonly, copy) NSString * _Nonnull issuingBank;
/// The country that issued the credit card, if available.
@property (nonatomic, readonly, copy) NSString * _Nonnull countryOfIssuance;
/// The code for the product type of the card (e.g. <code>D</code> (Visa Signature Preferred), <code>G</code> (Visa Business)), if available.
@property (nonatomic, readonly, copy) NSString * _Nonnull productID;
/// Create a <code>BTBinData</code> object from JSON.
- (nonnull instancetype)initWithJSON:(BTJSON * _Nullable)json OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Card type
typedef SWIFT_ENUM(NSInteger, BTCardNetwork, open) {
/// Unknown card
  BTCardNetworkUnknown = 0,
/// American Express
  BTCardNetworkAMEX = 1,
/// Diners Club
  BTCardNetworkDinersClub = 2,
/// Discover
  BTCardNetworkDiscover = 3,
/// Mastercard
  BTCardNetworkMasterCard = 4,
/// Visa
  BTCardNetworkVisa = 5,
/// JCB
  BTCardNetworkJCB = 6,
/// Laser
  BTCardNetworkLaser = 7,
/// Maestro
  BTCardNetworkMaestro = 8,
/// Union Pay
  BTCardNetworkUnionPay = 9,
/// Hiper
  BTCardNetworkHiper = 10,
/// Hipercard
  BTCardNetworkHipercard = 11,
/// Solo
  BTCardNetworkSolo = 12,
/// Switch
  BTCardNetworkSwitch = 13,
/// UK Maestro
  BTCardNetworkUkMaestro = 14,
};

/// :nodoc: This enum is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// Integration Types
typedef SWIFT_ENUM(NSInteger, BTClientMetadataIntegration, open) {
/// Custom
  BTClientMetadataIntegrationCustom = 0,
/// Drop-in
  BTClientMetadataIntegrationDropIn = 1,
};

/// :nodoc: This enum is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// Source of the metadata
typedef SWIFT_ENUM(NSInteger, BTClientMetadataSource, open) {
/// Unknown source
  BTClientMetadataSourceUnknown = 0,
/// PayPal app
  BTClientMetadataSourcePayPalApp = 1,
/// PayPal browser
  BTClientMetadataSourcePayPalBrowser = 2,
/// Venmo app
  BTClientMetadataSourceVenmoApp = 3,
/// Form
  BTClientMetadataSourceForm = 4,
};

@class NSCoder;

/// An authorization string used to initialize the Braintree SDK
SWIFT_CLASS("_TtC13BraintreeCore13BTClientToken")
@interface BTClientToken : NSObject <NSCoding, NSCopying>
/// :nodoc: This property is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// The client token as a BTJSON object
@property (nonatomic, readonly, strong) BTJSON * _Nonnull json;
/// :nodoc: This property is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// The extracted authorization fingerprint
@property (nonatomic, readonly, copy) NSString * _Nonnull bearer;
/// :nodoc: This property is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// The extracted configURL
@property (nonatomic, readonly, copy) NSURL * _Nonnull configURL;
/// :nodoc: This property is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// The original string used to initialize this instance
@property (nonatomic, readonly, copy) NSString * _Nonnull originalValue;
/// :nodoc: This method is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// Initialize a client token with a client token string generated by a Braintree Server Library.
/// \param clientToken A client token string generated by a Braintree Server Library
///
- (nullable instancetype)initWithClientToken:(NSString * _Nonnull)clientToken error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc: This class is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// Contains information specific to a merchant’s Braintree integration
SWIFT_CLASS("_TtC13BraintreeCore15BTConfiguration")
@interface BTConfiguration : NSObject
/// :nodoc: This property is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// The merchant account’s configuration as a <code>BTJSON</code> object
@property (nonatomic, readonly, strong) BTJSON * _Nullable json;
/// :nodoc: This property is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// The environment (production or sandbox)
@property (nonatomic, readonly, copy) NSString * _Nullable environment;
/// :nodoc: True if this instance is from in-memory <code>ConfigurationCache</code>. False if fetched directly from network.
@property (nonatomic) BOOL isFromCache;
/// :nodoc: This initalizer is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// Used to initialize a <code>BTConfiguration</code>
/// \param json The <code>BTJSON</code> to initialize with
///
- (nonnull instancetype)initWithJSON:(BTJSON * _Nullable)json OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// :nodoc: This class is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
SWIFT_CLASS("_TtC13BraintreeCore15BTCoreConstants")
@interface BTCoreConstants : NSObject
/// :nodoc: This property is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull braintreeSDKVersion;)
+ (NSString * _Nonnull)braintreeSDKVersion SWIFT_WARN_UNUSED_RESULT;
+ (void)setBraintreeSDKVersion:(NSString * _Nonnull)value;
/// :nodoc: This property is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull callbackURLScheme;)
+ (NSString * _Nonnull)callbackURLScheme SWIFT_WARN_UNUSED_RESULT;
/// URL Scheme for Venmo App
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull venmoURLScheme;)
+ (NSString * _Nonnull)venmoURLScheme SWIFT_WARN_UNUSED_RESULT;
/// URL Scheme for PayPal App
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull payPalURLScheme;)
+ (NSString * _Nonnull)payPalURLScheme SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: This property is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// The error domain for BTHTTP errors
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull httpErrorDomain;)
+ (NSString * _Nonnull)httpErrorDomain SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: This property is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// Key for userInfo dictionary that contains the NSHTTPURLResponse from server when it returns an HTTP error
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull urlResponseKey;)
+ (NSString * _Nonnull)urlResponseKey SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: This property is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// Key for userInfo dictionary that contains the BTJSON body of the HTTP error response
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull jsonResponseBodyKey;)
+ (NSString * _Nonnull)jsonResponseBodyKey SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSData;
@class NSError;
@class NSNumber;
@class BTPostalAddress;

/// :nodoc: This class is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// A type-safe wrapper around JSON
/// @see http://www.json.org/
/// The primary goal of this class is to two-fold: (1) prevent bugs by staying true to JSON (json.org)
/// rather than interpreting it in mysterious ways; (2) prevent bugs by making JSON interpretation
/// as un-surprising as possible.
/// Most notably, type casting occurs via the as* nullable methods; errors are deferred and can be checked explicitly using isError and asError.
/// <h2>Example Data:</h2>
/// \code
///    {
///      "foo": "bar",
///      "baz": [1, 2, 3]
///    }
///
/// \endcode<h2>Example Usage:</h2>
/// \code
///    let json : BTJSON = BTJSON(data:data);
///    json.isError  // false
///    json.isObject // true
///    json.isNumber // false
///    json.asObject // self
///    json["foo"]   // JSON(@"bar")
///    json["foo"].isString // true
///    json["foo"].asString // @"bar"
///    json["baz"].asString // null
///    json["baz"]["quux"].isError // true
///    json["baz"]["quux"].asError // NSError(domain: BTJSONErrorDomain, code: BTJSONErrorCodeTypeInvalid)
///    json["baz"][0].asError // null
///    json["baz"][0].asInteger //
///    json["random"]["nested"]["things"][3].isError // true
///
///    let json : BTJSON = BTJSON() // json.asJson => {}
///    json["foo"][0] = "bar" // json.asJSON => { "foo": ["bar"] }
///    json["baz"] = [ 1, 2, 3 ] // json.asJSON => { "foo": ["bar"], "baz": [1,2,3] }
///    json["quux"] = NSSet() // json.isError => true, json.asJSON => throws NSError(domain: BTJSONErrorDomain, code: BTJSONErrorInvalidData)
///
/// \endcode
SWIFT_CLASS("_TtC13BraintreeCore6BTJSON")
@interface BTJSON : NSObject
/// :nodoc: This initializer is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// Initialize with a value.
/// \param value The value to initialize with.
///
- (nonnull instancetype)initWithValue:(id _Nullable)value;
/// :nodoc: This initializer is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// Initialize with data.
/// \param data The <code>Data</code> to initialize with.
///
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data;
/// :nodoc: This property is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// Checks if the <code>BTJSON</code> is a <code>String</code>
///
/// returns:
/// <code>true</code> if this instance of <code>BTJSON</code> is a valid <code>String</code>
@property (nonatomic, readonly) BOOL isString;
/// :nodoc: This property is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// Checks if the <code>BTJSON</code> is a <code>Bool</code>
///
/// returns:
/// <code>true</code> if this instance of <code>BTJSON</code> is a valid <code>Bool</code>
@property (nonatomic, readonly) BOOL isBool;
/// :nodoc: This property is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// Checks if the <code>BTJSON</code> is a <code>NSNumber</code>
///
/// returns:
/// <code>true</code> if this instance of <code>BTJSON</code> is a valid <code>NSNumber</code>
@property (nonatomic, readonly) BOOL isNumber;
/// :nodoc: This property is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// Checks if the <code>BTJSON</code> is a <code>[Any]</code>
///
/// returns:
/// <code>true</code> if this instance of <code>BTJSON</code> is a valid <code>[Any]</code>
@property (nonatomic, readonly) BOOL isArray;
/// :nodoc: This property is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// Checks if the <code>BTJSON</code> is a <code>[String: Any]</code>
///
/// returns:
/// <code>true</code> if this instance of <code>BTJSON</code> is a valid <code>[String: Any]</code>
@property (nonatomic, readonly) BOOL isObject;
/// :nodoc: This property is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// Checks if the <code>BTJSON</code> is an error.
///
/// returns:
/// <code>true</code> if this instance of <code>BTJSON</code> is not valid.
@property (nonatomic, readonly) BOOL isError;
/// :nodoc: This property is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// Checks if the <code>BTJSON</code> is a value representing <code>true</code>
///
/// returns:
/// <code>true</code> if this instance of <code>BTJSON</code> is <code>true</code>
@property (nonatomic, readonly) BOOL isTrue;
/// :nodoc: This property is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// Checks if the <code>BTJSON</code> is a value representing <code>false</code>
///
/// returns:
/// <code>true</code> if this instance of <code>BTJSON</code> is <code>false</code>
@property (nonatomic, readonly) BOOL isFalse;
/// :nodoc: This property is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// Checks if the <code>BTJSON</code> is a value representing <code>nil</code>
///
/// returns:
/// <code>true</code> if this instance of <code>BTJSON</code> is <code>nil</code>
@property (nonatomic, readonly) BOOL isNull;
- (BTJSON * _Nonnull)objectAtIndexedSubscript:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (BTJSON * _Nonnull)objectForKeyedSubscript:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: This method is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// The <code>BTJSON</code> as a <code>NSError</code>.
///
/// returns:
/// A <code>NSError</code> representing the <code>BTJSON</code> instance.
- (NSError * _Nullable)asError SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: This method is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// The <code>BTJSON</code> as a <code>String</code>
///
/// returns:
/// A <code>String</code> representing the <code>BTJSON</code> instance
- (NSString * _Nullable)asString SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: This method is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// The <code>BTJSON</code> as a <code>[BTJSON]</code>
///
/// returns:
/// A <code>[BTJSON]</code> representing the <code>BTJSON</code> instance
- (NSArray<BTJSON *> * _Nullable)asArray SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: This method is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// The <code>BTJSON</code> as a <code>NSNumber</code>
///
/// returns:
/// A <code>NSNumber</code> representing the <code>BTJSON</code> instance
- (NSNumber * _Nullable)asNumber SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: This method is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// The <code>BTJSON</code> as a <code>URL</code>
///
/// returns:
/// A <code>URL</code> representing the <code>BTJSON</code> instance
- (NSURL * _Nullable)asURL SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: This method is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// The <code>BTJSON</code> as a <code>[String]</code>
///
/// returns:
/// A <code>[String]</code> representing the <code>BTJSON</code> instance
- (NSArray<NSString *> * _Nullable)asStringArray SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: This method is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// The <code>BTJSON</code> as a <code>NSDictionary</code>
///
/// returns:
/// A <code>NSDictionary</code> representing the <code>BTJSON</code> instance
- (NSDictionary * _Nullable)asDictionary SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: This method is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// The <code>BTJSON</code> as a <code>Int</code>
///
/// returns:
/// A <code>Int</code> representing the <code>BTJSON</code> instance
- (NSInteger)asIntegerOrZero SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: This method is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// The <code>BTJSON</code> as an <code>Enum</code>
/// \param mapping The mapping dictionary used to convert the value
///
/// \param orDefault The default value if conversion fails
///
///
/// returns:
/// An <code>Enum</code> representing the <code>BTJSON</code> instance
- (NSInteger)asEnum:(NSDictionary<NSString *, id> * _Nonnull)mapping orDefault:(NSInteger)orDefault SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: This method is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// The <code>BTJSON</code> as a <code>BTPostalAddress</code>
///
/// returns:
/// A <code>BTPostalAddress</code> parsed from the key/value pairs inside the <code>BTJSON</code>
- (BTPostalAddress * _Nullable)asAddress SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc: This class is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// Wrapper for accessing the string value of the log level
SWIFT_CLASS("_TtC13BraintreeCore21BTLogLevelDescription")
@interface BTLogLevelDescription : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// BTPaymentMethodNonce is for generic tokenized payment information.
/// For example, if a customer’s vaulted payment methods contains a type that’s not recognized or supported by the
/// Braintree SDK or the client-side integration (e.g. the vault contains a PayPal account but the client-side
/// integration does not include the PayPal component), this type can act as a fallback.
/// The payment method nonce is a public token that acts as a placeholder for sensitive payments data that
/// has been uploaded to Braintree for subsequent processing. The nonce is safe to access on the client and can be
/// used on your server to reference the data in Braintree operations, such as Transaction.sale.
SWIFT_CLASS("_TtC13BraintreeCore20BTPaymentMethodNonce")
@interface BTPaymentMethodNonce : NSObject
/// The payment method nonce.
@property (nonatomic, copy) NSString * _Nonnull nonce;
/// The string identifying the type of the payment method.
@property (nonatomic, copy) NSString * _Nonnull type;
/// The boolean indicating whether this is a default payment method.
@property (nonatomic) BOOL isDefault;
/// Initialize a new Payment Method Nonce.
/// \param nonce A transact-able payment method nonce.
///
///
/// returns:
/// A Payment Method Nonce, or <code>nil</code> if nonce is nil.
- (nonnull instancetype)initWithNonce:(NSString * _Nonnull)nonce OBJC_DESIGNATED_INITIALIZER;
/// Initialize a new Payment Method Nonce.
/// \param nonce A transact-able payment method nonce.
///
/// \param type A string identifying the type of the payment method.
///
///
/// returns:
/// A Payment Method Nonce, or <code>nil</code> if nonce is nil.
- (nonnull instancetype)initWithNonce:(NSString * _Nonnull)nonce type:(NSString * _Nonnull)type OBJC_DESIGNATED_INITIALIZER;
/// Initialize a new Payment Method Nonce.
/// \param nonce A transact-able payment method nonce.
///
/// \param type A string identifying the type of the payment method.
///
/// \param isDefault A boolean indicating whether this is a default payment method.
///
///
/// returns:
/// A Payment Method Nonce, or <code>nil</code> if nonce is nil.
- (nonnull instancetype)initWithNonce:(NSString * _Nonnull)nonce type:(NSString * _Nonnull)type isDefault:(BOOL)isDefault OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A JSON parser that parses <code>BTJSON</code> into concrete <code>BTPaymentMethodNonce</code> objects. It supports registration of parsers at runtime.
/// <code>BTPaymentMethodNonceParser</code> provides access to JSON parsing for different payment options
/// without introducing compile-time dependencies on payment option frameworks and their symbols.
SWIFT_CLASS("_TtC13BraintreeCore26BTPaymentMethodNonceParser")
@interface BTPaymentMethodNonceParser : NSObject
/// The singleton instance
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BTPaymentMethodNonceParser * _Nonnull sharedParser;)
+ (BTPaymentMethodNonceParser * _Nonnull)sharedParser SWIFT_WARN_UNUSED_RESULT;
/// An array of the tokenization types currently registered
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull allTypes;
/// Indicates whether a tokenization type is currently registered
/// \param type The tokenization type string
///
///
/// returns:
/// A bool indicating if the payment method type is available.
- (BOOL)isTypeAvailable:(NSString * _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
/// Registers a parsing block for a tokenization type.
/// \param type The tokenization type string
///
/// \param withParsingBlock jsonParsingBlock The block to execute when <code>parseJSON:type:</code> is called for the tokenization type.
/// This block should return a <code>BTPaymentMethodNonce</code> object, or <code>nil</code> if the JSON cannot be parsed.
///
- (void)registerType:(NSString * _Nullable)type withParsingBlock:(BTPaymentMethodNonce * _Nullable (^ _Nonnull)(BTJSON * _Nullable))withParsingBlock;
/// Parses tokenized payment information that has been serialized to JSON, and returns a <code>BTPaymentMethodNonce</code> object.
/// The <code>BTPaymentMethodNonce</code> object is created by the JSON parsing block that has been registered for the tokenization type.
/// If the <code>type</code> has not been registered, this method will attempt to read the nonce from the JSON and return
/// a basic object; if it fails, it will return <code>nil</code>.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     json: The tokenized payment info, serialized to JSON
///   </li>
///   <li>
///     type: The registered type of the parsing block to use
///   </li>
/// </ul>
///
/// returns:
/// A <code>BTPaymentMethodNonce</code> object, or <code>nil</code> if the tokenized payment info JSON does not contain a nonce
- (BTPaymentMethodNonce * _Nullable)parseJSON:(BTJSON * _Nullable)json withParsingBlockForType:(NSString * _Nullable)type SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Generic postal address
SWIFT_CLASS("_TtC13BraintreeCore15BTPostalAddress")
@interface BTPostalAddress : NSObject
/// Optional. Recipient name for shipping address.
@property (nonatomic, copy) NSString * _Nullable recipientName;
/// Line 1 of the Address (eg. number, street, etc).
@property (nonatomic, copy) NSString * _Nullable streetAddress;
/// Optional line 2 of the Address (eg. suite, apt #, etc.).
@property (nonatomic, copy) NSString * _Nullable extendedAddress;
/// City name
@property (nonatomic, copy) NSString * _Nullable locality;
/// 2 letter country code.
@property (nonatomic, copy) NSString * _Nullable countryCodeAlpha2;
/// Zip code or equivalent is usually required for countries that have them.
/// For a list of countries that do not have postal codes please refer to http://en.wikipedia.org/wiki/Postal_code.
@property (nonatomic, copy) NSString * _Nullable postalCode;
/// Either a two-letter state code (for the US), or an ISO-3166-2 country subdivision code of up to three letters.
@property (nonatomic, copy) NSString * _Nullable region;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc: This class is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// A helper class for converting URL queries to and from dictionaries
SWIFT_CLASS("_TtC13BraintreeCore10BTURLUtils")
@interface BTURLUtils : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc: This class is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
SWIFT_CLASS("_TtC13BraintreeCore26BTWebAuthenticationSession")
@interface BTWebAuthenticationSession : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class ASWebAuthenticationSession;

/// :nodoc: This class is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
SWIFT_CLASS("_TtC13BraintreeCore32BTWebAuthenticationSessionClient")
@interface BTWebAuthenticationSessionClient : NSObject <ASWebAuthenticationPresentationContextProviding>
- (ASPresentationAnchor _Nonnull)presentationAnchorForWebAuthenticationSession:(ASWebAuthenticationSession * _Nonnull)session SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
#ifndef BRAINTREECORE_SWIFT_H
#define BRAINTREECORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AuthenticationServices;
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="BraintreeCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;
@class BTConfiguration;
@class BTPaymentMethodNonce;
enum BTAPIClientHTTPService : NSInteger;
@class BTJSON;
@class NSHTTPURLResponse;

/// This class acts as the entry point for accessing the Braintree APIs via common HTTP methods performed on API endpoints.
/// note:
/// It also manages authentication via tokenization key and provides access to a merchant’s gateway configuration.
SWIFT_CLASS("_TtC13BraintreeCore11BTAPIClient")
@interface BTAPIClient : NSObject
/// Initialize a new API client.
/// \param authorization Your tokenization key or client token. Passing an invalid value may return <code>nil</code>.
///
- (nullable instancetype)initWithAuthorization:(NSString * _Nonnull)authorization OBJC_DESIGNATED_INITIALIZER;
/// :nodoc: This method is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// Provides configuration data as a <code>BTJSON</code> object.
/// The configuration data can be used by supported payment options to configure themselves
/// dynamically through the Control Panel. It also contains configuration options for the Braintree SDK Core components.
/// note:
/// This method is asynchronous because it requires a network call to fetch the
/// configuration for a merchant account from Braintree servers. This configuration is
/// cached on subsequent calls for better performance.
/// \param completion Callback that returns either a <code>BTConfiguration</code> or <code>Error</code>
///
- (void)fetchOrReturnRemoteConfiguration:(void (^ _Nonnull)(BTConfiguration * _Nullable, NSError * _Nullable))completion;
/// Fetches a customer’s vaulted payment method nonces.
/// Must be using client token with a customer ID specified.
/// note:
/// Only the top level <code>BTPaymentMethodNonce</code> type is returned, fetching any additional details will need to be done on the server
/// \param completion Callback that returns either an array of payment method nonces or an error
///
- (void)fetchPaymentMethodNonces:(void (^ _Nonnull)(NSArray<BTPaymentMethodNonce *> * _Nullable, NSError * _Nullable))completion;
/// Fetches a customer’s vaulted payment method nonces.
/// Must be using client token with a customer ID specified.
/// note:
/// Only the top level <code>BTPaymentMethodNonce</code> type is returned, fetching any additional details will need to be done on the server
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     defaultFirst: Specifies whether to sort the fetched payment method nonces with the default payment method or the most recently used payment method first
///   </li>
///   <li>
///     completion: Callback that returns either an array of payment method nonces or an error
///   </li>
/// </ul>
- (void)fetchPaymentMethodNonces:(BOOL)defaultFirst completion:(void (^ _Nonnull)(NSArray<BTPaymentMethodNonce *> * _Nullable, NSError * _Nullable))completion;
/// :nodoc: This method is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// Perfom an HTTP POST on a URL composed of the configured from environment and the given path.
/// \param path The endpoint URI path.
///
/// \param parameters Optional set of query parameters to be encoded with the request.
///
/// \param httpType The underlying <code>BTAPIClientHTTPService</code> of the HTTP request. Defaults to <code>.gateway</code>.
///
/// \param completion A block object to be executed when the request finishes.
/// On success, <code>body</code> and <code>response</code> will contain the JSON body response and the
/// HTTP response and <code>error</code> will be <code>nil</code>; on failure, <code>body</code> and <code>response</code> will be
/// <code>nil</code> and <code>error</code> will contain the error that occurred.
///
- (void)POST:(NSString * _Nonnull)path parameters:(NSDictionary<NSString *, id> * _Nullable)parameters httpType:(enum BTAPIClientHTTPService)httpType completion:(void (^ _Nonnull)(BTJSON * _Nullable, NSHTTPURLResponse * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// :nodoc: This enum is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
typedef SWIFT_ENUM(NSInteger, BTAPIClientHTTPService, open) {
/// Use the Gateway
  BTAPIClientHTTPServiceGateway = 0,
/// Use the GraphQL API
  BTAPIClientHTTPServiceGraphQLAPI = 1,
/// Use the PayPal API
  BTAPIClientHTTPServicePayPalAPI = 2,
};

@class NSURL;

/// :nodoc: This protocol is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
SWIFT_PROTOCOL("_TtP13BraintreeCore24BTAppContextSwitchClient_")
@protocol BTAppContextSwitchClient
/// Determine whether the return URL can be handled.
/// \param url the URL you receive in  <code>scene(_:openURLContexts:)</code> (or <code>application(_:open:options:)</code> if not using SceneDelegate) when returning to your app
///
///
/// returns:
/// <code>true</code> when the SDK can process the return URL
+ (BOOL)canHandleReturnURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Complete payment flow after returning from app or browser switch.
/// \param url The URL you receive in <code>scene(_:openURLContexts:)</code> (or <code>application(_:open:options:)</code> if not using SceneDelegate)
///
+ (void)handleReturnURL:(NSURL * _Nonnull)url;
@end

@class UIOpenURLContext;

/// Handles return URLs when returning from app context switch and routes the return URL to the correct app context switch client class.
/// note:
/// <code>returnURLScheme</code> must contain your app’s registered URL Type that starts with the app’s bundle ID.
/// When your app returns from app switch, the app delegate should call  <code>handleOpenURL</code> (or <code>handleOpen</code> if not using SceneDelegate)
SWIFT_CLASS("_TtC13BraintreeCore20BTAppContextSwitcher")
@interface BTAppContextSwitcher : NSObject
/// Singleton for shared instance of <code>BTAppContextSwitcher</code>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BTAppContextSwitcher * _Nonnull sharedInstance;)
+ (BTAppContextSwitcher * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
/// The URL scheme to return to this app after switching to another app or opening a SFSafariViewController.
/// This URL scheme must be registered as a URL Type in the app’s info.plist, and it must start with the app’s bundle ID.
/// note:
/// This property should only be used for the Venmo flow.
@property (nonatomic, copy) NSString * _Nonnull returnURLScheme;
/// Determine whether the return URL can be handled.
/// <ul>
///   <li>
///     Parameters: url the URL you receive in  <code>scene:openURLContexts:</code> (or <code>application:openURL:options:</code> if not using SceneDelegate) when returning to your app
///   </li>
/// </ul>
///
/// returns:
/// <code>true</code> when the SDK can process the return URL
- (BOOL)handleOpenURLContext:(UIOpenURLContext * _Nonnull)context;
/// Complete payment flow after returning from app or browser switch.
/// \param url The URL you receive in <code>scene:openURLContexts:</code> (or <code>application:openURL:options:</code> if not using SceneDelegate)
///
///
/// returns:
/// <code>true</code> when the SDK has handled the URL successfully
- (BOOL)handleOpenURL:(NSURL * _Nonnull)url;
/// Registers a class <code>Type</code> that can handle a return from app context switch with a static method.
/// \param client A class <code>Type</code> that implements <code>BTAppContextSwitchClient</code>, the methods of which will be invoked statically on the class.
///
- (void)registerAppContextSwitchClient:(Class <BTAppContextSwitchClient> _Nonnull)client;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Contains the bin data associated with a payment method
SWIFT_CLASS("_TtC13BraintreeCore9BTBinData")
@interface BTBinData : NSObject
/// Whether the card is a prepaid card. Possible values: Yes/No/Unknown
@property (nonatomic, readonly, copy) NSString * _Nonnull prepaid;
/// Whether the card is a healthcare card. Possible values: Yes/No/Unknown
@property (nonatomic, readonly, copy) NSString * _Nonnull healthcare;
/// Whether the card is a debit card. Possible values: Yes/No/Unknown
@property (nonatomic, readonly, copy) NSString * _Nonnull debit;
/// A value indicating whether the issuing bank’s card range is regulated by the Durbin Amendment due to the bank’s assets. Possible values: Yes/No/Unknown
@property (nonatomic, readonly, copy) NSString * _Nonnull durbinRegulated;
/// Whether the card type is a commercial card and is capable of processing Level 2 transactions. Possible values: Yes/No/Unknown
@property (nonatomic, readonly, copy) NSString * _Nonnull commercial;
/// Whether the card is a payroll card. Possible values: Yes/No/Unknown
@property (nonatomic, readonly, copy) NSString * _Nonnull payroll;
/// The bank that issued the credit card, if available.
@property (nonatomic, readonly, copy) NSString * _Nonnull issuingBank;
/// The country that issued the credit card, if available.
@property (nonatomic, readonly, copy) NSString * _Nonnull countryOfIssuance;
/// The code for the product type of the card (e.g. <code>D</code> (Visa Signature Preferred), <code>G</code> (Visa Business)), if available.
@property (nonatomic, readonly, copy) NSString * _Nonnull productID;
/// Create a <code>BTBinData</code> object from JSON.
- (nonnull instancetype)initWithJSON:(BTJSON * _Nullable)json OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Card type
typedef SWIFT_ENUM(NSInteger, BTCardNetwork, open) {
/// Unknown card
  BTCardNetworkUnknown = 0,
/// American Express
  BTCardNetworkAMEX = 1,
/// Diners Club
  BTCardNetworkDinersClub = 2,
/// Discover
  BTCardNetworkDiscover = 3,
/// Mastercard
  BTCardNetworkMasterCard = 4,
/// Visa
  BTCardNetworkVisa = 5,
/// JCB
  BTCardNetworkJCB = 6,
/// Laser
  BTCardNetworkLaser = 7,
/// Maestro
  BTCardNetworkMaestro = 8,
/// Union Pay
  BTCardNetworkUnionPay = 9,
/// Hiper
  BTCardNetworkHiper = 10,
/// Hipercard
  BTCardNetworkHipercard = 11,
/// Solo
  BTCardNetworkSolo = 12,
/// Switch
  BTCardNetworkSwitch = 13,
/// UK Maestro
  BTCardNetworkUkMaestro = 14,
};

/// :nodoc: This enum is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// Integration Types
typedef SWIFT_ENUM(NSInteger, BTClientMetadataIntegration, open) {
/// Custom
  BTClientMetadataIntegrationCustom = 0,
/// Drop-in
  BTClientMetadataIntegrationDropIn = 1,
};

/// :nodoc: This enum is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// Source of the metadata
typedef SWIFT_ENUM(NSInteger, BTClientMetadataSource, open) {
/// Unknown source
  BTClientMetadataSourceUnknown = 0,
/// PayPal app
  BTClientMetadataSourcePayPalApp = 1,
/// PayPal browser
  BTClientMetadataSourcePayPalBrowser = 2,
/// Venmo app
  BTClientMetadataSourceVenmoApp = 3,
/// Form
  BTClientMetadataSourceForm = 4,
};

@class NSCoder;

/// An authorization string used to initialize the Braintree SDK
SWIFT_CLASS("_TtC13BraintreeCore13BTClientToken")
@interface BTClientToken : NSObject <NSCoding, NSCopying>
/// :nodoc: This property is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// The client token as a BTJSON object
@property (nonatomic, readonly, strong) BTJSON * _Nonnull json;
/// :nodoc: This property is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// The extracted authorization fingerprint
@property (nonatomic, readonly, copy) NSString * _Nonnull bearer;
/// :nodoc: This property is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// The extracted configURL
@property (nonatomic, readonly, copy) NSURL * _Nonnull configURL;
/// :nodoc: This property is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// The original string used to initialize this instance
@property (nonatomic, readonly, copy) NSString * _Nonnull originalValue;
/// :nodoc: This method is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// Initialize a client token with a client token string generated by a Braintree Server Library.
/// \param clientToken A client token string generated by a Braintree Server Library
///
- (nullable instancetype)initWithClientToken:(NSString * _Nonnull)clientToken error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc: This class is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// Contains information specific to a merchant’s Braintree integration
SWIFT_CLASS("_TtC13BraintreeCore15BTConfiguration")
@interface BTConfiguration : NSObject
/// :nodoc: This property is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// The merchant account’s configuration as a <code>BTJSON</code> object
@property (nonatomic, readonly, strong) BTJSON * _Nullable json;
/// :nodoc: This property is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// The environment (production or sandbox)
@property (nonatomic, readonly, copy) NSString * _Nullable environment;
/// :nodoc: True if this instance is from in-memory <code>ConfigurationCache</code>. False if fetched directly from network.
@property (nonatomic) BOOL isFromCache;
/// :nodoc: This initalizer is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// Used to initialize a <code>BTConfiguration</code>
/// \param json The <code>BTJSON</code> to initialize with
///
- (nonnull instancetype)initWithJSON:(BTJSON * _Nullable)json OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// :nodoc: This class is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
SWIFT_CLASS("_TtC13BraintreeCore15BTCoreConstants")
@interface BTCoreConstants : NSObject
/// :nodoc: This property is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull braintreeSDKVersion;)
+ (NSString * _Nonnull)braintreeSDKVersion SWIFT_WARN_UNUSED_RESULT;
+ (void)setBraintreeSDKVersion:(NSString * _Nonnull)value;
/// :nodoc: This property is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull callbackURLScheme;)
+ (NSString * _Nonnull)callbackURLScheme SWIFT_WARN_UNUSED_RESULT;
/// URL Scheme for Venmo App
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull venmoURLScheme;)
+ (NSString * _Nonnull)venmoURLScheme SWIFT_WARN_UNUSED_RESULT;
/// URL Scheme for PayPal App
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull payPalURLScheme;)
+ (NSString * _Nonnull)payPalURLScheme SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: This property is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// The error domain for BTHTTP errors
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull httpErrorDomain;)
+ (NSString * _Nonnull)httpErrorDomain SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: This property is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// Key for userInfo dictionary that contains the NSHTTPURLResponse from server when it returns an HTTP error
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull urlResponseKey;)
+ (NSString * _Nonnull)urlResponseKey SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: This property is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// Key for userInfo dictionary that contains the BTJSON body of the HTTP error response
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull jsonResponseBodyKey;)
+ (NSString * _Nonnull)jsonResponseBodyKey SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSData;
@class NSError;
@class NSNumber;
@class BTPostalAddress;

/// :nodoc: This class is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// A type-safe wrapper around JSON
/// @see http://www.json.org/
/// The primary goal of this class is to two-fold: (1) prevent bugs by staying true to JSON (json.org)
/// rather than interpreting it in mysterious ways; (2) prevent bugs by making JSON interpretation
/// as un-surprising as possible.
/// Most notably, type casting occurs via the as* nullable methods; errors are deferred and can be checked explicitly using isError and asError.
/// <h2>Example Data:</h2>
/// \code
///    {
///      "foo": "bar",
///      "baz": [1, 2, 3]
///    }
///
/// \endcode<h2>Example Usage:</h2>
/// \code
///    let json : BTJSON = BTJSON(data:data);
///    json.isError  // false
///    json.isObject // true
///    json.isNumber // false
///    json.asObject // self
///    json["foo"]   // JSON(@"bar")
///    json["foo"].isString // true
///    json["foo"].asString // @"bar"
///    json["baz"].asString // null
///    json["baz"]["quux"].isError // true
///    json["baz"]["quux"].asError // NSError(domain: BTJSONErrorDomain, code: BTJSONErrorCodeTypeInvalid)
///    json["baz"][0].asError // null
///    json["baz"][0].asInteger //
///    json["random"]["nested"]["things"][3].isError // true
///
///    let json : BTJSON = BTJSON() // json.asJson => {}
///    json["foo"][0] = "bar" // json.asJSON => { "foo": ["bar"] }
///    json["baz"] = [ 1, 2, 3 ] // json.asJSON => { "foo": ["bar"], "baz": [1,2,3] }
///    json["quux"] = NSSet() // json.isError => true, json.asJSON => throws NSError(domain: BTJSONErrorDomain, code: BTJSONErrorInvalidData)
///
/// \endcode
SWIFT_CLASS("_TtC13BraintreeCore6BTJSON")
@interface BTJSON : NSObject
/// :nodoc: This initializer is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// Initialize with a value.
/// \param value The value to initialize with.
///
- (nonnull instancetype)initWithValue:(id _Nullable)value;
/// :nodoc: This initializer is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// Initialize with data.
/// \param data The <code>Data</code> to initialize with.
///
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data;
/// :nodoc: This property is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// Checks if the <code>BTJSON</code> is a <code>String</code>
///
/// returns:
/// <code>true</code> if this instance of <code>BTJSON</code> is a valid <code>String</code>
@property (nonatomic, readonly) BOOL isString;
/// :nodoc: This property is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// Checks if the <code>BTJSON</code> is a <code>Bool</code>
///
/// returns:
/// <code>true</code> if this instance of <code>BTJSON</code> is a valid <code>Bool</code>
@property (nonatomic, readonly) BOOL isBool;
/// :nodoc: This property is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// Checks if the <code>BTJSON</code> is a <code>NSNumber</code>
///
/// returns:
/// <code>true</code> if this instance of <code>BTJSON</code> is a valid <code>NSNumber</code>
@property (nonatomic, readonly) BOOL isNumber;
/// :nodoc: This property is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// Checks if the <code>BTJSON</code> is a <code>[Any]</code>
///
/// returns:
/// <code>true</code> if this instance of <code>BTJSON</code> is a valid <code>[Any]</code>
@property (nonatomic, readonly) BOOL isArray;
/// :nodoc: This property is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// Checks if the <code>BTJSON</code> is a <code>[String: Any]</code>
///
/// returns:
/// <code>true</code> if this instance of <code>BTJSON</code> is a valid <code>[String: Any]</code>
@property (nonatomic, readonly) BOOL isObject;
/// :nodoc: This property is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// Checks if the <code>BTJSON</code> is an error.
///
/// returns:
/// <code>true</code> if this instance of <code>BTJSON</code> is not valid.
@property (nonatomic, readonly) BOOL isError;
/// :nodoc: This property is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// Checks if the <code>BTJSON</code> is a value representing <code>true</code>
///
/// returns:
/// <code>true</code> if this instance of <code>BTJSON</code> is <code>true</code>
@property (nonatomic, readonly) BOOL isTrue;
/// :nodoc: This property is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// Checks if the <code>BTJSON</code> is a value representing <code>false</code>
///
/// returns:
/// <code>true</code> if this instance of <code>BTJSON</code> is <code>false</code>
@property (nonatomic, readonly) BOOL isFalse;
/// :nodoc: This property is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// Checks if the <code>BTJSON</code> is a value representing <code>nil</code>
///
/// returns:
/// <code>true</code> if this instance of <code>BTJSON</code> is <code>nil</code>
@property (nonatomic, readonly) BOOL isNull;
- (BTJSON * _Nonnull)objectAtIndexedSubscript:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (BTJSON * _Nonnull)objectForKeyedSubscript:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: This method is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// The <code>BTJSON</code> as a <code>NSError</code>.
///
/// returns:
/// A <code>NSError</code> representing the <code>BTJSON</code> instance.
- (NSError * _Nullable)asError SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: This method is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// The <code>BTJSON</code> as a <code>String</code>
///
/// returns:
/// A <code>String</code> representing the <code>BTJSON</code> instance
- (NSString * _Nullable)asString SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: This method is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// The <code>BTJSON</code> as a <code>[BTJSON]</code>
///
/// returns:
/// A <code>[BTJSON]</code> representing the <code>BTJSON</code> instance
- (NSArray<BTJSON *> * _Nullable)asArray SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: This method is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// The <code>BTJSON</code> as a <code>NSNumber</code>
///
/// returns:
/// A <code>NSNumber</code> representing the <code>BTJSON</code> instance
- (NSNumber * _Nullable)asNumber SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: This method is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// The <code>BTJSON</code> as a <code>URL</code>
///
/// returns:
/// A <code>URL</code> representing the <code>BTJSON</code> instance
- (NSURL * _Nullable)asURL SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: This method is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// The <code>BTJSON</code> as a <code>[String]</code>
///
/// returns:
/// A <code>[String]</code> representing the <code>BTJSON</code> instance
- (NSArray<NSString *> * _Nullable)asStringArray SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: This method is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// The <code>BTJSON</code> as a <code>NSDictionary</code>
///
/// returns:
/// A <code>NSDictionary</code> representing the <code>BTJSON</code> instance
- (NSDictionary * _Nullable)asDictionary SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: This method is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// The <code>BTJSON</code> as a <code>Int</code>
///
/// returns:
/// A <code>Int</code> representing the <code>BTJSON</code> instance
- (NSInteger)asIntegerOrZero SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: This method is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// The <code>BTJSON</code> as an <code>Enum</code>
/// \param mapping The mapping dictionary used to convert the value
///
/// \param orDefault The default value if conversion fails
///
///
/// returns:
/// An <code>Enum</code> representing the <code>BTJSON</code> instance
- (NSInteger)asEnum:(NSDictionary<NSString *, id> * _Nonnull)mapping orDefault:(NSInteger)orDefault SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: This method is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// The <code>BTJSON</code> as a <code>BTPostalAddress</code>
///
/// returns:
/// A <code>BTPostalAddress</code> parsed from the key/value pairs inside the <code>BTJSON</code>
- (BTPostalAddress * _Nullable)asAddress SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc: This class is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// Wrapper for accessing the string value of the log level
SWIFT_CLASS("_TtC13BraintreeCore21BTLogLevelDescription")
@interface BTLogLevelDescription : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// BTPaymentMethodNonce is for generic tokenized payment information.
/// For example, if a customer’s vaulted payment methods contains a type that’s not recognized or supported by the
/// Braintree SDK or the client-side integration (e.g. the vault contains a PayPal account but the client-side
/// integration does not include the PayPal component), this type can act as a fallback.
/// The payment method nonce is a public token that acts as a placeholder for sensitive payments data that
/// has been uploaded to Braintree for subsequent processing. The nonce is safe to access on the client and can be
/// used on your server to reference the data in Braintree operations, such as Transaction.sale.
SWIFT_CLASS("_TtC13BraintreeCore20BTPaymentMethodNonce")
@interface BTPaymentMethodNonce : NSObject
/// The payment method nonce.
@property (nonatomic, copy) NSString * _Nonnull nonce;
/// The string identifying the type of the payment method.
@property (nonatomic, copy) NSString * _Nonnull type;
/// The boolean indicating whether this is a default payment method.
@property (nonatomic) BOOL isDefault;
/// Initialize a new Payment Method Nonce.
/// \param nonce A transact-able payment method nonce.
///
///
/// returns:
/// A Payment Method Nonce, or <code>nil</code> if nonce is nil.
- (nonnull instancetype)initWithNonce:(NSString * _Nonnull)nonce OBJC_DESIGNATED_INITIALIZER;
/// Initialize a new Payment Method Nonce.
/// \param nonce A transact-able payment method nonce.
///
/// \param type A string identifying the type of the payment method.
///
///
/// returns:
/// A Payment Method Nonce, or <code>nil</code> if nonce is nil.
- (nonnull instancetype)initWithNonce:(NSString * _Nonnull)nonce type:(NSString * _Nonnull)type OBJC_DESIGNATED_INITIALIZER;
/// Initialize a new Payment Method Nonce.
/// \param nonce A transact-able payment method nonce.
///
/// \param type A string identifying the type of the payment method.
///
/// \param isDefault A boolean indicating whether this is a default payment method.
///
///
/// returns:
/// A Payment Method Nonce, or <code>nil</code> if nonce is nil.
- (nonnull instancetype)initWithNonce:(NSString * _Nonnull)nonce type:(NSString * _Nonnull)type isDefault:(BOOL)isDefault OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A JSON parser that parses <code>BTJSON</code> into concrete <code>BTPaymentMethodNonce</code> objects. It supports registration of parsers at runtime.
/// <code>BTPaymentMethodNonceParser</code> provides access to JSON parsing for different payment options
/// without introducing compile-time dependencies on payment option frameworks and their symbols.
SWIFT_CLASS("_TtC13BraintreeCore26BTPaymentMethodNonceParser")
@interface BTPaymentMethodNonceParser : NSObject
/// The singleton instance
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BTPaymentMethodNonceParser * _Nonnull sharedParser;)
+ (BTPaymentMethodNonceParser * _Nonnull)sharedParser SWIFT_WARN_UNUSED_RESULT;
/// An array of the tokenization types currently registered
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull allTypes;
/// Indicates whether a tokenization type is currently registered
/// \param type The tokenization type string
///
///
/// returns:
/// A bool indicating if the payment method type is available.
- (BOOL)isTypeAvailable:(NSString * _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
/// Registers a parsing block for a tokenization type.
/// \param type The tokenization type string
///
/// \param withParsingBlock jsonParsingBlock The block to execute when <code>parseJSON:type:</code> is called for the tokenization type.
/// This block should return a <code>BTPaymentMethodNonce</code> object, or <code>nil</code> if the JSON cannot be parsed.
///
- (void)registerType:(NSString * _Nullable)type withParsingBlock:(BTPaymentMethodNonce * _Nullable (^ _Nonnull)(BTJSON * _Nullable))withParsingBlock;
/// Parses tokenized payment information that has been serialized to JSON, and returns a <code>BTPaymentMethodNonce</code> object.
/// The <code>BTPaymentMethodNonce</code> object is created by the JSON parsing block that has been registered for the tokenization type.
/// If the <code>type</code> has not been registered, this method will attempt to read the nonce from the JSON and return
/// a basic object; if it fails, it will return <code>nil</code>.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     json: The tokenized payment info, serialized to JSON
///   </li>
///   <li>
///     type: The registered type of the parsing block to use
///   </li>
/// </ul>
///
/// returns:
/// A <code>BTPaymentMethodNonce</code> object, or <code>nil</code> if the tokenized payment info JSON does not contain a nonce
- (BTPaymentMethodNonce * _Nullable)parseJSON:(BTJSON * _Nullable)json withParsingBlockForType:(NSString * _Nullable)type SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Generic postal address
SWIFT_CLASS("_TtC13BraintreeCore15BTPostalAddress")
@interface BTPostalAddress : NSObject
/// Optional. Recipient name for shipping address.
@property (nonatomic, copy) NSString * _Nullable recipientName;
/// Line 1 of the Address (eg. number, street, etc).
@property (nonatomic, copy) NSString * _Nullable streetAddress;
/// Optional line 2 of the Address (eg. suite, apt #, etc.).
@property (nonatomic, copy) NSString * _Nullable extendedAddress;
/// City name
@property (nonatomic, copy) NSString * _Nullable locality;
/// 2 letter country code.
@property (nonatomic, copy) NSString * _Nullable countryCodeAlpha2;
/// Zip code or equivalent is usually required for countries that have them.
/// For a list of countries that do not have postal codes please refer to http://en.wikipedia.org/wiki/Postal_code.
@property (nonatomic, copy) NSString * _Nullable postalCode;
/// Either a two-letter state code (for the US), or an ISO-3166-2 country subdivision code of up to three letters.
@property (nonatomic, copy) NSString * _Nullable region;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc: This class is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// A helper class for converting URL queries to and from dictionaries
SWIFT_CLASS("_TtC13BraintreeCore10BTURLUtils")
@interface BTURLUtils : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc: This class is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
SWIFT_CLASS("_TtC13BraintreeCore26BTWebAuthenticationSession")
@interface BTWebAuthenticationSession : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class ASWebAuthenticationSession;

/// :nodoc: This class is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
SWIFT_CLASS("_TtC13BraintreeCore32BTWebAuthenticationSessionClient")
@interface BTWebAuthenticationSessionClient : NSObject <ASWebAuthenticationPresentationContextProviding>
- (ASPresentationAnchor _Nonnull)presentationAnchorForWebAuthenticationSession:(ASWebAuthenticationSession * _Nonnull)session SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
