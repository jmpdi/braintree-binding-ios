#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
#ifndef BRAINTREETHREEDSECURE_SWIFT_H
#define BRAINTREETHREEDSECURE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="BraintreeThreeDSecure",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

/// The account type
typedef SWIFT_ENUM(NSInteger, BTThreeDSecureAccountType, open) {
/// Unspecified
  BTThreeDSecureAccountTypeUnspecified = 0,
/// Credit
  BTThreeDSecureAccountTypeCredit = 1,
/// Debit
  BTThreeDSecureAccountTypeDebit = 2,
};

@class BTThreeDSecurePostalAddress;
@class NSString;

/// Additional information for a 3DS lookup. Used in 3DS 2.0+ flows.
SWIFT_CLASS("_TtC21BraintreeThreeDSecure35BTThreeDSecureAdditionalInformation")
@interface BTThreeDSecureAdditionalInformation : NSObject
/// Optional. The shipping address used for verification
@property (nonatomic, strong) BTThreeDSecurePostalAddress * _Nullable shippingAddress;
/// Optional. The 2-digit string indicating the shipping method chosen for the transaction
/// Possible Values:
/// <ul>
///   <li>
///     01:  Ship to cardholder billing address
///   </li>
///   <li>
///     02: Ship to another verified address on file with merchant
///   </li>
///   <li>
///     03: Ship to address that is different than billing address
///   </li>
///   <li>
///     04: Ship to store (store address should be populated on request)
///   </li>
///   <li>
///     05: Digital goods
///   </li>
///   <li>
///     06: Travel and event tickets, not shipped
///   </li>
///   <li>
///     07: Other
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nullable shippingMethodIndicator;
/// Optional. The 3-letter string representing the merchant product code
/// Possible Values:
/// <ul>
///   <li>
///     AIR: Airline
///   </li>
///   <li>
///     GEN: General Retail
///   </li>
///   <li>
///     DIG: Digital Goods
///   </li>
///   <li>
///     SVC: Services
///   </li>
///   <li>
///     RES: Restaurant
///   </li>
///   <li>
///     TRA: Travel
///   </li>
///   <li>
///     DSP: Cash Dispensing
///   </li>
///   <li>
///     REN: Car Rental
///   </li>
///   <li>
///     GAS: Fueld
///   </li>
///   <li>
///     LUX: Luxury Retail
///   </li>
///   <li>
///     ACC: Accommodation Retail
///   </li>
///   <li>
///     TBD: Other
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nullable productCode;
/// Optional. The 2-digit number indicating the delivery timeframe
/// Possible values:
/// <ul>
///   <li>
///     01: Electronic delivery
///   </li>
///   <li>
///     02: Same day shipping
///   </li>
///   <li>
///     03: Overnight shipping
///   </li>
///   <li>
///     04: Two or more day shipping
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nullable deliveryTimeframe;
/// Optional. For electronic delivery, email address to which the merchandise was delivered
@property (nonatomic, copy) NSString * _Nullable deliveryEmail;
/// Optional. The 2-digit number indicating whether the cardholder is reordering previously purchased merchandise
/// Possible values:
/// <ul>
///   <li>
///     01: First time ordered
///   </li>
///   <li>
///     02: Reordered
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nullable reorderIndicator;
/// Optional. The 2-digit number indicating whether the cardholder is placing an order with a future availability or release date
/// Possible values:
/// <ul>
///   <li>
///     01: Merchandise available
///   </li>
///   <li>
///     02: Future availability
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nullable preorderIndicator;
/// Optional. The 8-digit number (format: YYYYMMDD) indicating expected date that a pre-ordered purchase will be available
@property (nonatomic, copy) NSString * _Nullable preorderDate;
/// Optional. The purchase amount total for prepaid gift cards in major units
@property (nonatomic, copy) NSString * _Nullable giftCardAmount;
/// Optional. ISO 4217 currency code for the gift card purchased
@property (nonatomic, copy) NSString * _Nullable giftCardCurrencyCode;
/// Optional. Total count of individual prepaid gift cards purchased
@property (nonatomic, copy) NSString * _Nullable giftCardCount;
/// Optional. The 2-digit value representing the length of time since the last change to the cardholder account. This includes shipping address, new payment account or new user added.
/// Possible values:
/// <ul>
///   <li>
///     01: Changed during transaction
///   </li>
///   <li>
///     02: Less than 30 days
///   </li>
///   <li>
///     03: 30-60 days
///   </li>
///   <li>
///     04: More than 60 days
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nullable accountAgeIndicator;
/// Optional. The 8-digit number (format: YYYYMMDD) indicating the date the cardholder’s account was last changed.
/// This includes changes to the billing or shipping address, new payment accounts or new users added.
@property (nonatomic, copy) NSString * _Nullable accountCreateDate;
/// Optional. The 2-digit value representing the length of time since the last change to the cardholder account. This includes shipping address, new payment account or new user added.
/// Possible values:
/// <ul>
///   <li>
///     01: Changed during transaction
///   </li>
///   <li>
///     02: Less than 30 days
///   </li>
///   <li>
///     03: 30-60 days
///   </li>
///   <li>
///     04: More than 60 days
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nullable accountChangeIndicator;
/// Optional. The 8-digit number (format: YYYYMMDD) indicating the date the cardholder’s account was last changed.
/// This includes changes to the billing or shipping address, new payment accounts or new users added.
@property (nonatomic, copy) NSString * _Nullable accountChangeDate;
/// Optional. The 2-digit value representing the length of time since the cardholder changed or reset the password on the account.
/// Possible values:
/// <ul>
///   <li>
///     01: No change
///   </li>
///   <li>
///     02: Changed during transaction
///   </li>
///   <li>
///     03: Less than 30 days
///   </li>
///   <li>
///     04: 30-60 days
///   </li>
///   <li>
///     05: More than 60 days
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nullable accountPwdChangeIndicator;
/// Optional. The 8-digit number (format: YYYYMMDD) indicating the date the cardholder last changed or reset password on account.
@property (nonatomic, copy) NSString * _Nullable accountPwdChangeDate;
/// Optional. The 2-digit value indicating when the shipping address used for transaction was first used.
/// Possible values:
/// <ul>
///   <li>
///     01: This transaction
///   </li>
///   <li>
///     02: Less than 30 days
///   </li>
///   <li>
///     03: 30-60 days
///   </li>
///   <li>
///     04: More than 60 days
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nullable shippingAddressUsageIndicator;
/// Optional. The 8-digit number (format: YYYYMMDD) indicating the date when the shipping address used for this transaction was first used.
@property (nonatomic, copy) NSString * _Nullable shippingAddressUsageDate;
/// Optional. Number of transactions (successful or abandoned) for this cardholder account within the last 24 hours.
@property (nonatomic, copy) NSString * _Nullable transactionCountDay;
/// Optional. Number of transactions (successful or abandoned) for this cardholder account within the last year.
@property (nonatomic, copy) NSString * _Nullable transactionCountYear;
/// Optional. Number of add card attempts in the last 24 hours.
@property (nonatomic, copy) NSString * _Nullable addCardAttempts;
/// Optional. Number of purchases with this cardholder account during the previous six months.
@property (nonatomic, copy) NSString * _Nullable accountPurchases;
/// Optional. The 2-digit value indicating whether the merchant experienced suspicious activity (including previous fraud) on the account.
/// Possible values:
/// <ul>
///   <li>
///     01: No suspicious activity
///   </li>
///   <li>
///     02: Suspicious activity observed
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nullable fraudActivity;
/// Optional. The 2-digit value indicating if the cardholder name on the account is identical to the shipping name used for the transaction.
/// Possible values:
/// <ul>
///   <li>
///     01: Account name identical to shipping name
///   </li>
///   <li>
///     02: Account name different than shipping name
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nullable shippingNameIndicator;
/// Optional. The 2-digit value indicating the length of time that the payment account was enrolled in the merchant account.
/// Possible values:
/// <ul>
///   <li>
///     01: No account (guest checkout)
///   </li>
///   <li>
///     02: During the transaction
///   </li>
///   <li>
///     03: Less than 30 days
///   </li>
///   <li>
///     04: 30-60 days
///   </li>
///   <li>
///     05: More than 60 days
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nullable paymentAccountIndicator;
/// Optional. The 8-digit number (format: YYYYMMDD) indicating the date the payment account was added to the cardholder account.
@property (nonatomic, copy) NSString * _Nullable paymentAccountAge;
/// Optional. The 1-character value (Y/N) indicating whether cardholder billing and shipping addresses match.
@property (nonatomic, copy) NSString * _Nullable addressMatch;
/// Optional. Additional cardholder account information.
@property (nonatomic, copy) NSString * _Nullable accountID;
/// Optional. The IP address of the consumer. IPv4 and IPv6 are supported.
@property (nonatomic, copy) NSString * _Nullable ipAddress;
/// Optional. Brief description of items purchased.
@property (nonatomic, copy) NSString * _Nullable orderDescription;
/// Optional. Unformatted tax amount without any decimalization (ie. $123.67 = 12367).
@property (nonatomic, copy) NSString * _Nullable taxAmount;
/// Optional. The exact content of the HTTP user agent header.
@property (nonatomic, copy) NSString * _Nullable userAgent;
/// Optional. The 2-digit number indicating the type of authentication request.
/// Possible values:
/// <ul>
///   <li>
///     02: Recurring transaction
///   </li>
///   <li>
///     03: Installment transaction
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nullable authenticationIndicator;
/// Optional.  An integer value greater than 1 indicating the maximum number of permitted authorizations for installment payments.
@property (nonatomic, copy) NSString * _Nullable installment;
/// Optional. The 14-digit number (format: YYYYMMDDHHMMSS) indicating the date in UTC of original purchase.
@property (nonatomic, copy) NSString * _Nullable purchaseDate;
/// Optional. The 8-digit number (format: YYYYMMDD) indicating the date after which no further recurring authorizations should be performed.
@property (nonatomic, copy) NSString * _Nullable recurringEnd;
/// Optional. Integer value indicating the minimum number of days between recurring authorizations.
/// A frequency of monthly is indicated by the value 28. Multiple of 28 days will be used to indicate months (ex. 6 months = 168).
@property (nonatomic, copy) NSString * _Nullable recurringFrequency;
/// Optional. The 2-digit number of minutes (minimum 05) to set the maximum amount of time for all 3DS 2.0 messages to be communicated between all components.
@property (nonatomic, copy) NSString * _Nullable sdkMaxTimeout;
/// Optional. The work phone number used for verification. Only numbers; remove dashes, parenthesis and other characters.
@property (nonatomic, copy) NSString * _Nullable workPhoneNumber;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// The card add challenge request
typedef SWIFT_ENUM(NSInteger, BTThreeDSecureCardAddChallenge, open) {
/// Unspecified
  BTThreeDSecureCardAddChallengeUnspecified = 0,
/// Requested
  BTThreeDSecureCardAddChallengeRequested = 1,
/// Not Requested
  BTThreeDSecureCardAddChallengeNotRequested = 2,
};

@class BTAPIClient;
@class BTThreeDSecureRequest;
@class BTThreeDSecureResult;

SWIFT_CLASS("_TtC21BraintreeThreeDSecure20BTThreeDSecureClient")
@interface BTThreeDSecureClient : NSObject
/// Initialize a new BTThreeDSecureClient instance.
/// \param apiClient An API client
///
- (nonnull instancetype)initWithAPIClient:(BTAPIClient * _Nonnull)apiClient OBJC_DESIGNATED_INITIALIZER;
/// Starts the 3DS flow using a BTThreeDSecureRequest.
/// \param request A BTThreeDSecureRequest request.
///
/// \param completion This completion will be invoked exactly once when the 3DS flow is complete or an error occurs.
///
- (void)startPaymentFlow:(BTThreeDSecureRequest * _Nonnull)request completion:(void (^ _Nonnull)(BTThreeDSecureResult * _Nullable, NSError * _Nullable))completion;
/// Creates a stringified JSON object containing the information necessary to perform a lookup.
/// \param request The <code>BTThreeDSecureRequest</code> object where prepareLookup was called.
///
/// \param completion This completion will be invoked exactly once with the client payload string or an error.
///
- (void)prepareLookup:(BTThreeDSecureRequest * _Nonnull)request completion:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion;
/// Creates a stringified JSON object containing the information necessary to perform a lookup.
/// \param request The <code>BTThreeDSecureRequest</code> object where prepareLookup was called.
///
///
/// throws:
/// An <code>Error</code> describing the failure
///
/// returns:
/// On success, you will receive a client payload string
- (void)prepareLookup:(BTThreeDSecureRequest * _Nonnull)request completionHandler:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completionHandler;
/// Initialize a challenge from a server side lookup call.
/// note:
/// Majority of 3DS integrations do not need to use this method. Only for server-side 3DS integrations.
/// \param lookupResponse The JSON string returned by the server side lookup.
///
/// \param request The BTThreeDSecureRequest object where prepareLookup was called.
///
/// \param completion This completion will be invoked exactly once when the payment flow is complete or an error occurs.
///
- (void)initializeChallengeWithLookupResponse:(NSString * _Nonnull)lookupResponse request:(BTThreeDSecureRequest * _Nonnull)request completion:(void (^ _Nonnull)(BTThreeDSecureResult * _Nullable, NSError * _Nullable))completion;
/// Initialize a challenge from a server side lookup call.
/// \param lookupResponse The JSON string returned by the server side lookup.
///
/// \param request The BTThreeDSecureRequest object where prepareLookup was called.
///
///
/// throws:
/// An <code>Error</code> describing the failure
///
/// returns:
/// On success, you will receive an instance of <code>BTThreeDSecureResult</code>
- (void)initializeChallengeWithLookupResponse:(NSString * _Nonnull)lookupResponse request:(BTThreeDSecureRequest * _Nonnull)request completionHandler:(void (^ _Nonnull)(BTThreeDSecureResult * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSURL;

/// The result of a 3DS lookup.
/// Contains liability shift and challenge information.
SWIFT_CLASS("_TtC21BraintreeThreeDSecure20BTThreeDSecureLookup")
@interface BTThreeDSecureLookup : NSObject
/// The “PAReq” or “Payment Authentication Request” is the encoded request message used to initiate authentication.
@property (nonatomic, copy) NSString * _Nullable paReq;
/// The unique 3DS identifier assigned by Braintree to track the 3DS call as it progresses.
@property (nonatomic, copy) NSString * _Nullable md;
/// The URL which the customer will be redirected to for a 3DS Interface.
/// In 3DS 2, the presence of an acsURL indicates there is a challenge as it would otherwise frictionlessly complete without an acsURL.
@property (nonatomic, copy) NSURL * _Nullable acsURL;
/// The termURL is the fully qualified URL that the customer will be redirected to once the authentication completes.
@property (nonatomic, copy) NSURL * _Nullable termURL;
/// The full version string of the 3DS lookup result.
@property (nonatomic, copy) NSString * _Nullable threeDSecureVersion;
/// Indicates a 3DS 2 lookup result.
@property (nonatomic) BOOL isThreeDSecureVersion2;
/// This a secondary unique 3DS identifier assigned by Braintree to track the 3DS call as it progresses.
@property (nonatomic, copy) NSString * _Nullable transactionID;
/// Indicates that a 3DS challenge is required.
@property (nonatomic) BOOL requiresUserAuthentication;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Postal address for 3D Secure flows
SWIFT_CLASS("_TtC21BraintreeThreeDSecure27BTThreeDSecurePostalAddress")
@interface BTThreeDSecurePostalAddress : NSObject
/// Optional. Given name associated with the address
@property (nonatomic, copy) NSString * _Nullable givenName;
/// Optional. Surname associated with the address
@property (nonatomic, copy) NSString * _Nullable surname;
/// Optional. Line 1 of the Address (eg. number, street, etc)
@property (nonatomic, copy) NSString * _Nullable streetAddress;
/// Optional. Line 2 of the Address (eg. suite, apt #, etc.)
@property (nonatomic, copy) NSString * _Nullable extendedAddress;
/// Optional. Line 3 of the Address (eg. suite, apt #, etc.)
@property (nonatomic, copy) NSString * _Nullable line3;
/// Optional. City name
@property (nonatomic, copy) NSString * _Nullable locality;
/// Optional. Either a two-letter state code (for the US), or an ISO-3166-2 country subdivision code of up to three letters.
@property (nonatomic, copy) NSString * _Nullable region;
/// Optional. Zip code or equivalent is usually required for countries that have them.
/// For a list of countries that do not have postal codes please refer to http://en.wikipedia.org/wiki/Postal_code
@property (nonatomic, copy) NSString * _Nullable postalCode;
/// Optional. 2 letter country code
@property (nonatomic, copy) NSString * _Nullable countryCodeAlpha2;
/// Optional. The phone number associated with the address
/// note:
/// Only numbers. Remove dashes, parentheses and other characters
@property (nonatomic, copy) NSString * _Nullable phoneNumber;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Render types that the device supports for displaying specific challenge user interfaces within the 3D Secure challenge.
SWIFT_CLASS("_TtC21BraintreeThreeDSecure24BTThreeDSecureRenderType")
@interface BTThreeDSecureRenderType : NSObject
@property (nonatomic, readonly) NSInteger rawValue;
- (nonnull instancetype)initWithRawValue:(NSInteger)rawValue OBJC_DESIGNATED_INITIALIZER;
/// OTP
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BTThreeDSecureRenderType * _Nonnull otp;)
+ (BTThreeDSecureRenderType * _Nonnull)otp SWIFT_WARN_UNUSED_RESULT;
/// HTML
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BTThreeDSecureRenderType * _Nonnull html;)
+ (BTThreeDSecureRenderType * _Nonnull)html SWIFT_WARN_UNUSED_RESULT;
/// Single select
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BTThreeDSecureRenderType * _Nonnull singleSelect;)
+ (BTThreeDSecureRenderType * _Nonnull)singleSelect SWIFT_WARN_UNUSED_RESULT;
/// Multi Select
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BTThreeDSecureRenderType * _Nonnull multiSelect;)
+ (BTThreeDSecureRenderType * _Nonnull)multiSelect SWIFT_WARN_UNUSED_RESULT;
/// OOB
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BTThreeDSecureRenderType * _Nonnull oob;)
+ (BTThreeDSecureRenderType * _Nonnull)oob SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSDecimalNumber;
enum BTThreeDSecureShippingMethod : NSInteger;
enum BTThreeDSecureRequestedExemptionType : NSInteger;
@class BTThreeDSecureV2UICustomization;
enum BTThreeDSecureUIType : NSInteger;
@protocol BTThreeDSecureRequestDelegate;

/// Used to initialize a 3D Secure payment flow
SWIFT_CLASS("_TtC21BraintreeThreeDSecure21BTThreeDSecureRequest")
@interface BTThreeDSecureRequest : NSObject
/// A nonce to be verified by ThreeDSecure
@property (nonatomic, copy) NSString * _Nullable nonce;
/// Object where each key is the name of a custom field which has been configured in the Control Panel. In the Control Panel you can configure 3D Secure Rules which trigger on certain values.
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable customFields;
/// The amount for the transaction
@property (nonatomic, strong) NSDecimalNumber * _Nullable amount;
/// Optional. The account type selected by the cardholder
/// note:
/// Some cards can be processed using either a credit or debit account and cardholders have the option to choose which account to use.
@property (nonatomic) enum BTThreeDSecureAccountType accountType;
/// Optional. The billing address used for verification
@property (nonatomic, strong) BTThreeDSecurePostalAddress * _Nullable billingAddress;
/// Optional. The mobile phone number used for verification
/// note:
/// Only numbers. Remove dashes, parentheses and other characters
@property (nonatomic, copy) NSString * _Nullable mobilePhoneNumber;
/// Optional. The email used for verification
@property (nonatomic, copy) NSString * _Nullable email;
/// Optional. The shipping method chosen for the transaction
@property (nonatomic) enum BTThreeDSecureShippingMethod shippingMethod;
/// Optional. The additional information used for verification
@property (nonatomic, strong) BTThreeDSecureAdditionalInformation * _Nullable additionalInformation;
/// Optional. If set to true, an authentication challenge will be forced if possible.
@property (nonatomic) BOOL challengeRequested;
/// Optional. If set to true, an exemption to the authentication challenge will be requested.
@property (nonatomic) BOOL exemptionRequested;
/// Optional. The exemption type to be requested. If an exemption is requested and the exemption’s conditions are satisfied, then it will be applied.
@property (nonatomic) enum BTThreeDSecureRequestedExemptionType requestedExemptionType;
/// Optional. Indicates whether to use the data only flow. In this flow, frictionless 3DS is ensured for Mastercard cardholders as the card scheme provides a risk score
/// for the issuer to determine whether to approve. If data only is not supported by the processor, a validation error will be raised.
/// Non-Mastercard cardholders will fallback to a normal 3DS flow.
@property (nonatomic) BOOL dataOnlyRequested;
/// Optional. An authentication created using this property should only be used for adding a payment method to the merchant’s vault and not for creating transactions.
/// Defaults to <code>.unspecified.</code>
/// If set to <code>.challengeRequested</code>, the authentication challenge will be requested from the issuer to confirm adding new card to the merchant’s vault.
/// If set to <code>.notRequested</code> the authentication challenge will not be requested from the issuer.
/// If set to <code>.unspecified</code>, when the amount is 0, the authentication challenge will be requested from the issuer.
/// If set to <code>.unspecified</code>, when the amount is greater than 0, the authentication challenge will not be requested from the issuer.
@property (nonatomic) enum BTThreeDSecureCardAddChallenge cardAddChallenge SWIFT_DEPRECATED_MSG("Use the `cardAddChallengeRequested` boolean property instead", "cardAddChallengeRequested");
/// Optional.  An authentication created using this flag should only be used for vaulting operations (creation of customers’ credit cards or payment methods) and not for creating transactions.
/// If set to <code>true</code>, a card-add challenge will be requested from the issuer.
/// If set to <code>false</code>, a card-add challenge will not be requested.
/// If the parameter is missing, a card-add challenge will only be requested for $0 amount.
@property (nonatomic) BOOL cardAddChallengeRequested;
/// Optional. UI Customization for 3DS2 challenge views.
@property (nonatomic, strong) BTThreeDSecureV2UICustomization * _Nullable v2UICustomization;
/// Optional. Sets all UI types that the device supports for displaying specific challenge user interfaces in the 3D Secure challenge.
/// Defaults to <code>.both</code>
@property (nonatomic) enum BTThreeDSecureUIType uiType;
/// Optional. List of all the render types that the device supports for displaying specific challenge user interfaces within the 3D Secure challenge.
/// note:
/// When using <code>BTThreeDSecureUIType.both</code> or <code>BTThreeDSecureUIType.html</code>, all <code>BTThreeDSecureRenderType</code> options must be set.
/// When using <code>BTThreeDSecureUIType.native</code>, all <code>BTThreeDSecureRenderType</code> options except <code>.html</code> must be set.
@property (nonatomic, copy) NSArray<BTThreeDSecureRenderType *> * _Nullable renderTypes;
/// A delegate for receiving information about the ThreeDSecure payment flow.
@property (nonatomic, weak) id <BTThreeDSecureRequestDelegate> _Nullable threeDSecureRequestDelegate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Protocol for ThreeDSecure Request flow
SWIFT_PROTOCOL("_TtP21BraintreeThreeDSecure29BTThreeDSecureRequestDelegate_")
@protocol BTThreeDSecureRequestDelegate
/// Required delegate method which returns the ThreeDSecure lookup result before the flow continues.
/// Use this to do any UI preparation or custom lookup result handling. Use the <code>next()</code> callback to continue the flow.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     request: The <code>BTThreeDSecureRequest</code> associated with the lookup.
///   </li>
///   <li>
///     result: <code>BTThreeDSecureResult</code> details.
///   </li>
///   <li>
///     next: Must be called to continue the flow.
///   </li>
/// </ul>
- (void)onLookupComplete:(BTThreeDSecureRequest * _Nonnull)request lookupResult:(BTThreeDSecureResult * _Nonnull)lookupResult next:(void (^ _Nonnull)(void))next;
@end

/// 3D Secure requested exemption type
typedef SWIFT_ENUM(NSInteger, BTThreeDSecureRequestedExemptionType, open) {
/// Unspecified
  BTThreeDSecureRequestedExemptionTypeUnspecified = 0,
/// Low value
  BTThreeDSecureRequestedExemptionTypeLowValue = 1,
/// Secure corporate
  BTThreeDSecureRequestedExemptionTypeSecureCorporate = 2,
/// Trusted beneficiary
  BTThreeDSecureRequestedExemptionTypeTrustedBeneficiary = 3,
/// Transaction risk analysis
  BTThreeDSecureRequestedExemptionTypeTransactionRiskAnalysis = 4,
};

@class BTCardNonce;

/// The result of a 3D Secure payment flow
SWIFT_CLASS("_TtC21BraintreeThreeDSecure20BTThreeDSecureResult")
@interface BTThreeDSecureResult : NSObject
/// The <code>BTCardNonce</code> resulting from the 3D Secure flow
@property (nonatomic, strong) BTCardNonce * _Nullable tokenizedCard;
/// The result of a 3D Secure lookup. Contains liability shift and challenge information.
@property (nonatomic, strong) BTThreeDSecureLookup * _Nullable lookup;
/// The error message when the 3D Secure flow is unsuccessful
@property (nonatomic, copy) NSString * _Nullable errorMessage;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The shipping method
typedef SWIFT_ENUM(NSInteger, BTThreeDSecureShippingMethod, open) {
/// Unspecified
  BTThreeDSecureShippingMethodUnspecified = 0,
/// Same Day
  BTThreeDSecureShippingMethodSameDay = 1,
/// Expedited
  BTThreeDSecureShippingMethodExpedited = 2,
/// Priority
  BTThreeDSecureShippingMethodPriority = 3,
/// Ground
  BTThreeDSecureShippingMethodGround = 4,
/// Electronic Delivery
  BTThreeDSecureShippingMethodElectronicDelivery = 5,
/// Ship to Store
  BTThreeDSecureShippingMethodShipToStore = 6,
};

/// The interface types that the device supports for displaying specific challenge user interfaces within the 3D Secure challenge.
typedef SWIFT_ENUM(NSInteger, BTThreeDSecureUIType, open) {
/// Native
  BTThreeDSecureUITypeNative = 0,
/// HTML
  BTThreeDSecureUITypeHtml = 1,
/// Both
  BTThreeDSecureUITypeBoth = 2,
};


/// Base customization options for 3D Secure 2 flows.
SWIFT_CLASS("_TtC21BraintreeThreeDSecure33BTThreeDSecureV2BaseCustomization")
@interface BTThreeDSecureV2BaseCustomization : NSObject
/// Font type for the UI element.
@property (nonatomic, copy) NSString * _Nullable textFontName;
/// Color code in Hex format. For example, the color code can be “#999999”.
@property (nonatomic, copy) NSString * _Nullable textColor;
/// Font size for the UI element.
@property (nonatomic) NSInteger textFontSize;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Button customization options for 3D Secure 2 flows.
SWIFT_CLASS("_TtC21BraintreeThreeDSecure35BTThreeDSecureV2ButtonCustomization")
@interface BTThreeDSecureV2ButtonCustomization : BTThreeDSecureV2BaseCustomization
/// Color code in Hex format. For example, the color code can be “#999999”.
@property (nonatomic, copy) NSString * _Nullable backgroundColor;
/// Radius (integer value) for the button corners.
@property (nonatomic) NSInteger cornerRadius;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Button types that can be customized in 3D Secure 2 flows.
typedef SWIFT_ENUM(NSInteger, BTThreeDSecureV2ButtonType, open) {
/// Verify button
  BTThreeDSecureV2ButtonTypeVerify = 0,
/// Continue button
  BTThreeDSecureV2ButtonTypeContinue = 1,
/// Next button
  BTThreeDSecureV2ButtonTypeNext = 2,
/// Cancel button
  BTThreeDSecureV2ButtonTypeCancel = 3,
/// Resend button
  BTThreeDSecureV2ButtonTypeResend = 4,
};


/// Label customization options for 3D Secure 2 flows.
SWIFT_CLASS("_TtC21BraintreeThreeDSecure34BTThreeDSecureV2LabelCustomization")
@interface BTThreeDSecureV2LabelCustomization : BTThreeDSecureV2BaseCustomization
/// Color code in Hex format. For example, the color code can be “#999999”.
@property (nonatomic, copy) NSString * _Nullable headingTextColor;
/// Font type for the heading label text.
@property (nonatomic, copy) NSString * _Nullable headingTextFontName;
/// Font size for the heading label text.
@property (nonatomic) NSInteger headingTextFontSize;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Text box customization options for 3D Secure 2 flows.
SWIFT_CLASS("_TtC21BraintreeThreeDSecure36BTThreeDSecureV2TextBoxCustomization")
@interface BTThreeDSecureV2TextBoxCustomization : BTThreeDSecureV2BaseCustomization
/// Width (integer value) of the text box border.
@property (nonatomic) NSInteger borderWidth;
/// Color code in Hex format. For example, the color code can be “#999999”.
@property (nonatomic, copy) NSString * _Nullable borderColor;
/// Radius (integer value) for the text box corners.
@property (nonatomic) NSInteger cornerRadius;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Toolbar customization options for 3D Secure 2 flows.
SWIFT_CLASS("_TtC21BraintreeThreeDSecure36BTThreeDSecureV2ToolbarCustomization")
@interface BTThreeDSecureV2ToolbarCustomization : BTThreeDSecureV2BaseCustomization
/// Color code in Hex format. For example, the color code can be “#999999”.
@property (nonatomic, copy) NSString * _Nullable backgroundColor;
/// Text for the header.
@property (nonatomic, copy) NSString * _Nullable headerText;
/// Text for the button. For example, “Cancel”.
@property (nonatomic, copy) NSString * _Nullable buttonText;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// UI customization options for 3D Secure 2 flows.
SWIFT_CLASS("_TtC21BraintreeThreeDSecure31BTThreeDSecureV2UICustomization")
@interface BTThreeDSecureV2UICustomization : NSObject
/// Toolbar customization options for 3D Secure 2 flows.
@property (nonatomic, strong) BTThreeDSecureV2ToolbarCustomization * _Nullable toolbarCustomization;
/// Label customization options for 3D Secure 2 flows.
@property (nonatomic, strong) BTThreeDSecureV2LabelCustomization * _Nullable labelCustomization;
/// Text box customization options for 3D Secure 2 flows.
@property (nonatomic, strong) BTThreeDSecureV2TextBoxCustomization * _Nullable textBoxCustomization;
/// Set button customization options for 3D Secure 2 flows.
/// \param buttonCustomization Button customization options
///
/// \param buttonType Button type
///
- (void)setButtonCustomization:(BTThreeDSecureV2ButtonCustomization * _Nonnull)buttonCustomization buttonType:(enum BTThreeDSecureV2ButtonType)buttonType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
