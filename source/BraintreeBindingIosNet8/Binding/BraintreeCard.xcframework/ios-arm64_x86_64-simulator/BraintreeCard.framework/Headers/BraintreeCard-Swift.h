#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
#ifndef BRAINTREECARD_SWIFT_H
#define BRAINTREECARD_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import BraintreeCore;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="BraintreeCard",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;

/// Information pertaining to the regulatory environment for a credit card if authentication insight is requested during tokenization.
SWIFT_CLASS("_TtC13BraintreeCard23BTAuthenticationInsight")
@interface BTAuthenticationInsight : NSObject
/// The regulation environment for the associated nonce to help determine the need for 3D Secure.
/// See https://developer.paypal.com/braintree/docs/guides/3d-secure/advanced-options/ios/v5#authentication-insight
/// for a list of possible values.
@property (nonatomic, copy) NSString * _Nullable regulationEnvironment;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The card tokenization request represents raw credit or debit card data provided by the customer.
/// Its main purpose is to serve as the input for tokenization.
SWIFT_CLASS("_TtC13BraintreeCard6BTCard")
@interface BTCard : NSObject
/// The card number
@property (nonatomic, copy) NSString * _Nullable number;
/// The expiration month as a one or two-digit number on the Gregorian calendar
@property (nonatomic, copy) NSString * _Nullable expirationMonth;
/// The expiration year as a two or four-digit number on the Gregorian calendar
@property (nonatomic, copy) NSString * _Nullable expirationYear;
/// The card verification code (like CVV or CID).
/// note:
/// If you wish to create a CVV-only payment method nonce to verify a card already stored in your Vault,
/// omit all other properties to only collect CVV.
@property (nonatomic, copy) NSString * _Nullable cvv;
/// The postal code associated with the card’s billing address
@property (nonatomic, copy) NSString * _Nullable postalCode;
/// Optional: the cardholder’s name.
@property (nonatomic, copy) NSString * _Nullable cardholderName;
/// Optional: first name on the card.
@property (nonatomic, copy) NSString * _Nullable firstName;
/// Optional: last name on the card.
@property (nonatomic, copy) NSString * _Nullable lastName;
/// Optional: company name associated with the card.
@property (nonatomic, copy) NSString * _Nullable company;
/// Optional: the street address associated with the card’s billing address
@property (nonatomic, copy) NSString * _Nullable streetAddress;
/// Optional: the extended address associated with the card’s billing address
@property (nonatomic, copy) NSString * _Nullable extendedAddress;
/// Optional: the city associated with the card’s billing address
@property (nonatomic, copy) NSString * _Nullable locality;
/// Optional: either a two-letter state code (for the US), or an ISO-3166-2 country subdivision code of up to three letters.
@property (nonatomic, copy) NSString * _Nullable region;
/// Optional: the country name associated with the card’s billing address.
/// note:
/// Braintree only accepts specific country names.
/// seealso:
/// https://developer.paypal.com/braintree/docs/reference/general/countries#list-of-countries
@property (nonatomic, copy) NSString * _Nullable countryName;
/// Optional: the ISO 3166-1 alpha-2 country code specified in the card’s billing address.
/// note:
/// Braintree only accepts specific alpha-2 values.
/// seealso:
/// https://developer.paypal.com/braintree/docs/reference/general/countries#list-of-countries
@property (nonatomic, copy) NSString * _Nullable countryCodeAlpha2;
/// Optional: the ISO 3166-1 alpha-3 country code specified in the card’s billing address.
/// note:
/// Braintree only accepts specific alpha-3 values.
/// seealso:
/// https://developer.paypal.com/braintree/docs/reference/general/countries#list-of-countries
@property (nonatomic, copy) NSString * _Nullable countryCodeAlpha3;
/// Optional: The ISO 3166-1 numeric country code specified in the card’s billing address.
/// note:
/// Braintree only accepts specific numeric values.
/// seealso:
/// https://developer.paypal.com/braintree/docs/reference/general/countries#list-of-countries
@property (nonatomic, copy) NSString * _Nullable countryCodeNumeric;
/// Controls whether or not to return validations and/or verification results. By default, this is not enabled.
/// note:
/// Use this flag with caution. By enabling client-side validation, certain tokenize card requests may result in adding the card to the vault.
/// These semantics are not currently documented.
@property (nonatomic) BOOL shouldValidate;
/// Optional: If authentication insight is requested. If this property is set to true, a <code>merchantAccountID</code> must be provided. Defaults to false.
@property (nonatomic) BOOL authenticationInsightRequested;
/// Optional: The merchant account ID.
@property (nonatomic, copy) NSString * _Nullable merchantAccountID;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class BTAPIClient;
@class BTCardNonce;

/// Used to process cards
SWIFT_CLASS("_TtC13BraintreeCard12BTCardClient")
@interface BTCardClient : NSObject
/// Creates a card client
/// \param apiClient An API client
///
- (nonnull instancetype)initWithAPIClient:(BTAPIClient * _Nonnull)apiClient OBJC_DESIGNATED_INITIALIZER;
/// Tokenizes a card
/// \param card The card to tokenize.
///
/// \param completion A completion block that is invoked when card tokenization has completed. If tokenization succeeds,
/// <code>tokenize</code> will contain a nonce and <code>error</code> will be <code>nil</code>; if it fails, <code>tokenize</code> will be <code>nil</code> and <code>error</code>will describe the failure.
///
- (void)tokenizeCard:(BTCard * _Nonnull)card completion:(void (^ _Nonnull)(BTCardNonce * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class BTBinData;
@class BTThreeDSecureInfo;
@class BTJSON;

/// Contains information about a tokenized card.
SWIFT_RESILIENT_CLASS("_TtC13BraintreeCard11BTCardNonce")
@interface BTCardNonce : BTPaymentMethodNonce
/// The card network.
@property (nonatomic) enum BTCardNetwork cardNetwork;
/// The expiration month of the card, if available.
@property (nonatomic, copy) NSString * _Nullable expirationMonth;
/// The expiration year of the card, if available.
@property (nonatomic, copy) NSString * _Nullable expirationYear;
/// The name of the cardholder, if available.
@property (nonatomic, copy) NSString * _Nullable cardholderName;
/// The last two digits of the card, if available.
@property (nonatomic, copy) NSString * _Nullable lastTwo;
/// The last four digits of the card, if available.
@property (nonatomic, copy) NSString * _Nullable lastFour;
/// The BIN number of the card, if available.
@property (nonatomic, copy) NSString * _Nullable bin;
/// The BIN data for the card number associated with this nonce.
@property (nonatomic, strong) BTBinData * _Nonnull binData;
/// The 3D Secure info for the card number associated with this nonce.
@property (nonatomic, strong) BTThreeDSecureInfo * _Nonnull threeDSecureInfo;
/// Details about the regulatory environment and applicable customer authentication regulation for a potential transaction.
/// This can be used to make an informed decision whether to perform 3D Secure authentication.
@property (nonatomic, strong) BTAuthenticationInsight * _Nullable authenticationInsight;
/// :nodoc: This method is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// Create a <code>BTCardNonce</code> object from JSON.
- (nonnull instancetype)initWithJSON:(BTJSON * _Nullable)cardJSON;
- (nonnull instancetype)initWithNonce:(NSString * _Nonnull)nonce SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithNonce:(NSString * _Nonnull)nonce type:(NSString * _Nonnull)type SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithNonce:(NSString * _Nonnull)nonce type:(NSString * _Nonnull)type isDefault:(BOOL)isDefault SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC13BraintreeCard13BTCardRequest") SWIFT_DEPRECATED_MSG("Use BTCard directly instead")
@interface BTCardRequest : NSObject
/// The <code>BTCard</code> associated with this instance.
@property (nonatomic, strong) BTCard * _Nonnull card;
/// Initialize a Card request with a <code>BTCard</code>.
/// \param card The <code>BTCard</code> to initialize with.
///
- (nonnull instancetype)initWithCard:(BTCard * _Nonnull)card OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Contains information about the 3D Secure status of a payment method
SWIFT_CLASS("_TtC13BraintreeCard18BTThreeDSecureInfo")
@interface BTThreeDSecureInfo : NSObject
/// Unique transaction identifier assigned by the Access Control Server (ACS) to identify a single transaction.
@property (nonatomic, copy) NSString * _Nullable acsTransactionID;
/// On authentication, the transaction status result identifier.
@property (nonatomic, copy) NSString * _Nullable authenticationTransactionStatus;
/// On authentication, provides additional information as to why the transaction status has the specific value.
@property (nonatomic, copy) NSString * _Nullable authenticationTransactionStatusReason;
/// Cardholder authentication verification value or “CAVV” is the main encrypted message issuers and card networks use to verify authentication has occured.
/// Mastercard uses an “AVV” message which will also be returned in the cavv parameter.
@property (nonatomic, copy) NSString * _Nullable cavv;
/// Directory Server Transaction ID is an ID used by the card brand’s 3DS directory server.
@property (nonatomic, copy) NSString * _Nullable dsTransactionID;
/// The ecommerce indicator flag indicates the outcome of the 3DS authentication.
/// Possible values are 00, 01, and 02 for Mastercard 05, 06, and 07 for all other cardbrands.
@property (nonatomic, copy) NSString * _Nullable eciFlag;
/// Indicates whether a card is enrolled in a 3D Secure program or not. Possible values:
/// <ul>
///   <li>
///     <code>Y</code> = Yes
///   </li>
///   <li>
///     <code>N</code> = No
///   </li>
///   <li>
///     <code>U</code> = Unavailable
///   </li>
///   <li>
///     <code>B</code> = Bypass
///   </li>
///   <li>
///     <code>E</code> = RequestFailure
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nullable enrolled;
/// If the 3D Secure liability shift has occurred.
@property (nonatomic) BOOL liabilityShifted;
/// If the 3D Secure liability shift is possible.
@property (nonatomic) BOOL liabilityShiftPossible;
/// On lookup, the transaction status result identifier.
@property (nonatomic, copy) NSString * _Nullable lookupTransactionStatus;
/// On lookup, provides additional information as to why the transaction status has the specific value.
@property (nonatomic, copy) NSString * _Nullable lookupTransactionStatusReason;
/// The Payer Authentication Response (PARes) Status, a transaction status result identifier. Possible Values:
/// <ul>
///   <li>
///     <code>Y</code> – Successful Authentication
///   </li>
///   <li>
///     <code>N</code> – Failed Authentication
///   </li>
///   <li>
///     <code>U</code> – Unable to Complete Authentication
///   </li>
///   <li>
///     <code>A </code>– Successful Stand-In Attempts Transaction
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nullable paresStatus;
/// The 3D Secure status value.
@property (nonatomic, copy) NSString * _Nullable status;
/// Unique identifier assigned to the 3D Secure authentication performed for this transaction.
@property (nonatomic, copy) NSString * _Nullable threeDSecureAuthenticationID;
/// Unique transaction identifier assigned by the 3DS Server to identify a single transaction.
@property (nonatomic, copy) NSString * _Nullable threeDSecureServerTransactionID;
/// The 3DS version used in the authentication, example “1.0.2” or “2.1.0”.
@property (nonatomic, copy) NSString * _Nullable threeDSecureVersion;
/// Indicates if the 3D Secure lookup was performed.
@property (nonatomic) BOOL wasVerified;
/// Transaction identifier resulting from 3D Secure authentication. Uniquely identifies the transaction and sometimes required in the authorization message.
/// This field will no longer be used in 3DS 2 authentications.
@property (nonatomic, copy) NSString * _Nullable xid;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
#ifndef BRAINTREECARD_SWIFT_H
#define BRAINTREECARD_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import BraintreeCore;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="BraintreeCard",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;

/// Information pertaining to the regulatory environment for a credit card if authentication insight is requested during tokenization.
SWIFT_CLASS("_TtC13BraintreeCard23BTAuthenticationInsight")
@interface BTAuthenticationInsight : NSObject
/// The regulation environment for the associated nonce to help determine the need for 3D Secure.
/// See https://developer.paypal.com/braintree/docs/guides/3d-secure/advanced-options/ios/v5#authentication-insight
/// for a list of possible values.
@property (nonatomic, copy) NSString * _Nullable regulationEnvironment;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The card tokenization request represents raw credit or debit card data provided by the customer.
/// Its main purpose is to serve as the input for tokenization.
SWIFT_CLASS("_TtC13BraintreeCard6BTCard")
@interface BTCard : NSObject
/// The card number
@property (nonatomic, copy) NSString * _Nullable number;
/// The expiration month as a one or two-digit number on the Gregorian calendar
@property (nonatomic, copy) NSString * _Nullable expirationMonth;
/// The expiration year as a two or four-digit number on the Gregorian calendar
@property (nonatomic, copy) NSString * _Nullable expirationYear;
/// The card verification code (like CVV or CID).
/// note:
/// If you wish to create a CVV-only payment method nonce to verify a card already stored in your Vault,
/// omit all other properties to only collect CVV.
@property (nonatomic, copy) NSString * _Nullable cvv;
/// The postal code associated with the card’s billing address
@property (nonatomic, copy) NSString * _Nullable postalCode;
/// Optional: the cardholder’s name.
@property (nonatomic, copy) NSString * _Nullable cardholderName;
/// Optional: first name on the card.
@property (nonatomic, copy) NSString * _Nullable firstName;
/// Optional: last name on the card.
@property (nonatomic, copy) NSString * _Nullable lastName;
/// Optional: company name associated with the card.
@property (nonatomic, copy) NSString * _Nullable company;
/// Optional: the street address associated with the card’s billing address
@property (nonatomic, copy) NSString * _Nullable streetAddress;
/// Optional: the extended address associated with the card’s billing address
@property (nonatomic, copy) NSString * _Nullable extendedAddress;
/// Optional: the city associated with the card’s billing address
@property (nonatomic, copy) NSString * _Nullable locality;
/// Optional: either a two-letter state code (for the US), or an ISO-3166-2 country subdivision code of up to three letters.
@property (nonatomic, copy) NSString * _Nullable region;
/// Optional: the country name associated with the card’s billing address.
/// note:
/// Braintree only accepts specific country names.
/// seealso:
/// https://developer.paypal.com/braintree/docs/reference/general/countries#list-of-countries
@property (nonatomic, copy) NSString * _Nullable countryName;
/// Optional: the ISO 3166-1 alpha-2 country code specified in the card’s billing address.
/// note:
/// Braintree only accepts specific alpha-2 values.
/// seealso:
/// https://developer.paypal.com/braintree/docs/reference/general/countries#list-of-countries
@property (nonatomic, copy) NSString * _Nullable countryCodeAlpha2;
/// Optional: the ISO 3166-1 alpha-3 country code specified in the card’s billing address.
/// note:
/// Braintree only accepts specific alpha-3 values.
/// seealso:
/// https://developer.paypal.com/braintree/docs/reference/general/countries#list-of-countries
@property (nonatomic, copy) NSString * _Nullable countryCodeAlpha3;
/// Optional: The ISO 3166-1 numeric country code specified in the card’s billing address.
/// note:
/// Braintree only accepts specific numeric values.
/// seealso:
/// https://developer.paypal.com/braintree/docs/reference/general/countries#list-of-countries
@property (nonatomic, copy) NSString * _Nullable countryCodeNumeric;
/// Controls whether or not to return validations and/or verification results. By default, this is not enabled.
/// note:
/// Use this flag with caution. By enabling client-side validation, certain tokenize card requests may result in adding the card to the vault.
/// These semantics are not currently documented.
@property (nonatomic) BOOL shouldValidate;
/// Optional: If authentication insight is requested. If this property is set to true, a <code>merchantAccountID</code> must be provided. Defaults to false.
@property (nonatomic) BOOL authenticationInsightRequested;
/// Optional: The merchant account ID.
@property (nonatomic, copy) NSString * _Nullable merchantAccountID;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class BTAPIClient;
@class BTCardNonce;

/// Used to process cards
SWIFT_CLASS("_TtC13BraintreeCard12BTCardClient")
@interface BTCardClient : NSObject
/// Creates a card client
/// \param apiClient An API client
///
- (nonnull instancetype)initWithAPIClient:(BTAPIClient * _Nonnull)apiClient OBJC_DESIGNATED_INITIALIZER;
/// Tokenizes a card
/// \param card The card to tokenize.
///
/// \param completion A completion block that is invoked when card tokenization has completed. If tokenization succeeds,
/// <code>tokenize</code> will contain a nonce and <code>error</code> will be <code>nil</code>; if it fails, <code>tokenize</code> will be <code>nil</code> and <code>error</code>will describe the failure.
///
- (void)tokenizeCard:(BTCard * _Nonnull)card completion:(void (^ _Nonnull)(BTCardNonce * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class BTBinData;
@class BTThreeDSecureInfo;
@class BTJSON;

/// Contains information about a tokenized card.
SWIFT_RESILIENT_CLASS("_TtC13BraintreeCard11BTCardNonce")
@interface BTCardNonce : BTPaymentMethodNonce
/// The card network.
@property (nonatomic) enum BTCardNetwork cardNetwork;
/// The expiration month of the card, if available.
@property (nonatomic, copy) NSString * _Nullable expirationMonth;
/// The expiration year of the card, if available.
@property (nonatomic, copy) NSString * _Nullable expirationYear;
/// The name of the cardholder, if available.
@property (nonatomic, copy) NSString * _Nullable cardholderName;
/// The last two digits of the card, if available.
@property (nonatomic, copy) NSString * _Nullable lastTwo;
/// The last four digits of the card, if available.
@property (nonatomic, copy) NSString * _Nullable lastFour;
/// The BIN number of the card, if available.
@property (nonatomic, copy) NSString * _Nullable bin;
/// The BIN data for the card number associated with this nonce.
@property (nonatomic, strong) BTBinData * _Nonnull binData;
/// The 3D Secure info for the card number associated with this nonce.
@property (nonatomic, strong) BTThreeDSecureInfo * _Nonnull threeDSecureInfo;
/// Details about the regulatory environment and applicable customer authentication regulation for a potential transaction.
/// This can be used to make an informed decision whether to perform 3D Secure authentication.
@property (nonatomic, strong) BTAuthenticationInsight * _Nullable authenticationInsight;
/// :nodoc: This method is exposed for internal Braintree use only. Do not use. It is not covered by Semantic Versioning and may change or be removed at any time.
/// Create a <code>BTCardNonce</code> object from JSON.
- (nonnull instancetype)initWithJSON:(BTJSON * _Nullable)cardJSON;
- (nonnull instancetype)initWithNonce:(NSString * _Nonnull)nonce SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithNonce:(NSString * _Nonnull)nonce type:(NSString * _Nonnull)type SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithNonce:(NSString * _Nonnull)nonce type:(NSString * _Nonnull)type isDefault:(BOOL)isDefault SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC13BraintreeCard13BTCardRequest") SWIFT_DEPRECATED_MSG("Use BTCard directly instead")
@interface BTCardRequest : NSObject
/// The <code>BTCard</code> associated with this instance.
@property (nonatomic, strong) BTCard * _Nonnull card;
/// Initialize a Card request with a <code>BTCard</code>.
/// \param card The <code>BTCard</code> to initialize with.
///
- (nonnull instancetype)initWithCard:(BTCard * _Nonnull)card OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Contains information about the 3D Secure status of a payment method
SWIFT_CLASS("_TtC13BraintreeCard18BTThreeDSecureInfo")
@interface BTThreeDSecureInfo : NSObject
/// Unique transaction identifier assigned by the Access Control Server (ACS) to identify a single transaction.
@property (nonatomic, copy) NSString * _Nullable acsTransactionID;
/// On authentication, the transaction status result identifier.
@property (nonatomic, copy) NSString * _Nullable authenticationTransactionStatus;
/// On authentication, provides additional information as to why the transaction status has the specific value.
@property (nonatomic, copy) NSString * _Nullable authenticationTransactionStatusReason;
/// Cardholder authentication verification value or “CAVV” is the main encrypted message issuers and card networks use to verify authentication has occured.
/// Mastercard uses an “AVV” message which will also be returned in the cavv parameter.
@property (nonatomic, copy) NSString * _Nullable cavv;
/// Directory Server Transaction ID is an ID used by the card brand’s 3DS directory server.
@property (nonatomic, copy) NSString * _Nullable dsTransactionID;
/// The ecommerce indicator flag indicates the outcome of the 3DS authentication.
/// Possible values are 00, 01, and 02 for Mastercard 05, 06, and 07 for all other cardbrands.
@property (nonatomic, copy) NSString * _Nullable eciFlag;
/// Indicates whether a card is enrolled in a 3D Secure program or not. Possible values:
/// <ul>
///   <li>
///     <code>Y</code> = Yes
///   </li>
///   <li>
///     <code>N</code> = No
///   </li>
///   <li>
///     <code>U</code> = Unavailable
///   </li>
///   <li>
///     <code>B</code> = Bypass
///   </li>
///   <li>
///     <code>E</code> = RequestFailure
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nullable enrolled;
/// If the 3D Secure liability shift has occurred.
@property (nonatomic) BOOL liabilityShifted;
/// If the 3D Secure liability shift is possible.
@property (nonatomic) BOOL liabilityShiftPossible;
/// On lookup, the transaction status result identifier.
@property (nonatomic, copy) NSString * _Nullable lookupTransactionStatus;
/// On lookup, provides additional information as to why the transaction status has the specific value.
@property (nonatomic, copy) NSString * _Nullable lookupTransactionStatusReason;
/// The Payer Authentication Response (PARes) Status, a transaction status result identifier. Possible Values:
/// <ul>
///   <li>
///     <code>Y</code> – Successful Authentication
///   </li>
///   <li>
///     <code>N</code> – Failed Authentication
///   </li>
///   <li>
///     <code>U</code> – Unable to Complete Authentication
///   </li>
///   <li>
///     <code>A </code>– Successful Stand-In Attempts Transaction
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nullable paresStatus;
/// The 3D Secure status value.
@property (nonatomic, copy) NSString * _Nullable status;
/// Unique identifier assigned to the 3D Secure authentication performed for this transaction.
@property (nonatomic, copy) NSString * _Nullable threeDSecureAuthenticationID;
/// Unique transaction identifier assigned by the 3DS Server to identify a single transaction.
@property (nonatomic, copy) NSString * _Nullable threeDSecureServerTransactionID;
/// The 3DS version used in the authentication, example “1.0.2” or “2.1.0”.
@property (nonatomic, copy) NSString * _Nullable threeDSecureVersion;
/// Indicates if the 3D Secure lookup was performed.
@property (nonatomic) BOOL wasVerified;
/// Transaction identifier resulting from 3D Secure authentication. Uniquely identifies the transaction and sometimes required in the authorization message.
/// This field will no longer be used in 3DS 2 authentications.
@property (nonatomic, copy) NSString * _Nullable xid;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
